<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>m_veloper</title>
    <description></description>
    <link>https://m-veloper.github.io/</link>
    <atom:link href="https://m-veloper.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 15 Feb 2020 11:19:24 +0900</pubDate>
    <lastBuildDate>Sat, 15 Feb 2020 11:19:24 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[Database] 데이터베이스 스키마</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-15-database-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dbms의-구성&quot;&gt;DBMS의 구성&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-15-database-04-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;DDL 컴파일러&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 정의어로 작성된 스키마의 정의를 해석&lt;/li&gt;
      &lt;li&gt;저장 데이터 관리자의 도움을 받아 새로운 DB 구축&lt;/li&gt;
      &lt;li&gt;스키마의 정의를 데이터 사전에 저장&lt;/li&gt;
      &lt;li&gt;DDL로 작성된 기존 스키마의 삭제나 수정 요청도 처리하여 변경된 내용을 데이터 사전에 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DML 프리 컴파일러&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;응용 프로그램에 삽입된 데이터 조작어를 추출하여 DML 컴파일러에게 전달&lt;/li&gt;
      &lt;li&gt;데이터 조작어와 관련이 없는 코드는 해당 언어의 컴파일러에 전달&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DML 컴파일러&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 조작어로 작성된 데이터의 처리(삽입, 수정, 삭제, 검색) 요구를 분석하여 런타임 데이터베이스 처리기가 이해할 수 있도록 해석&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;런타임 데이터베이스 처리기&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;저장 데이터 관리자를 통해 데이터베이스에 접근&lt;/li&gt;
      &lt;li&gt;DML 컴파일러로부터 전달받은 데이터 처리 요구를 데이터베이스에서 실제로 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;트랜잭션 관리자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DB 접근을 위한 사용자의 접근 권한이 유효한지 검사&lt;/li&gt;
      &lt;li&gt;DB 무결성을 유지하기 위한 제약조건 위반 여부를 확인&lt;/li&gt;
      &lt;li&gt;회복, 병행 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;저장 데이터 관리자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사용자 DB와 데이터 사전을 관리&lt;/li&gt;
      &lt;li&gt;운영체제의 도움을 받아 DB에 접근&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;데이터베이스-스키마-3단계&quot;&gt;데이터베이스 스키마 (3단계)&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에서 자료의 구조, 자료의 표현 방법, 자료 간의 관계를 형식 언어로 정의한 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;외부 스키마&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;일반사용자나 응용프로그래머가 접근하는 계층&lt;/li&gt;
      &lt;li&gt;사용자에게 필요한 데이터베이스를 정의&lt;/li&gt;
      &lt;li&gt;하나의 데이터베이스에 여러 개의 외부 스키마가 존재할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개념 스키마&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 전체적인 논리적 구조를 정의&lt;/li&gt;
      &lt;li&gt;하나의 데이터베이스에 하나의 개념 스키마만 존재함&lt;/li&gt;
      &lt;li&gt;데이터의 관계, 제약조건, 무결성에 대한 내용이 포함&lt;/li&gt;
      &lt;li&gt;데이터에 대한 보안 정책이나 접근 권한에 대한 정의 포함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내부 스키마&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DBMS가 보는 데이터&lt;/li&gt;
      &lt;li&gt;물리적 저장 장치에 데이터베이스가 실제로 저장되는 방법&lt;/li&gt;
      &lt;li&gt;레코드 구조, 필드 크기, 레코드 접근 경로, 데이터 압축 등 물리적 저장 구조를 정의&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;매핑사상-및-데이터-독립성-1&quot;&gt;매핑/사상 및 데이터 독립성 1&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;매핑(Mapping) / 사상&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;외부/개념 매핑&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;외부 스키마의 데이터가 개념 스키마의 어느 부분에 해당되는지 대응시킴&lt;/li&gt;
          &lt;li&gt;응용 인터페이스 (Application Interface)라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;개념/내부 매핑&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;개념 스키마의 데이터가 내부 스키마의 물리적 장치 어디에 어떤 방법으로 저장되는지 대응&lt;/li&gt;
          &lt;li&gt;저장 인터페이스 (Storage Interface)라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 독립성 (Data Independency)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;논리적 데이터 독립성 (Logical Data Independency)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;외부 단계와 개념 단계 사이의 독립성&lt;/li&gt;
          &lt;li&gt;개념 스키마가 변경되어도 외부 스키마에는 영향이 없도록 하는 개념&lt;/li&gt;
          &lt;li&gt;예, 개념 스키마의 테이블을 생성하거나 변경할 경우, 외부 스키마가 직접 다루는 테이블이 아니면 영향을 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;물리적 데이터 독립성 (Physical Data Independency)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;개념 단계와 내부 단계 사이의 독립성&lt;/li&gt;
          &lt;li&gt;저장 장치 구조 변경과 같이 내부 스키마가 변경되어도 개념스키마에 영향이 없도록 하는 개념&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;매핑사상-및-데이터-독립성-2&quot;&gt;매핑/사상 및 데이터 독립성 2&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 스키마 구성도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-15-database-04-02.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 스키마 예&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-15-database-04-03.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/assets/img/database/2020-02-15-database-04-04.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Feb 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/02/15/database-04/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/02/15/database-04/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 데이터베이스 시스템</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-14-database-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터베이스-시스템-dbs-database-system&quot;&gt;데이터베이스 시스템 (DBS, DataBase System)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 데이터베이스에 저장하고, 관리하여 사용자의 요청에 따라 필요한 정보를 생성해주는 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;구성요소&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터베이스 관리 시스템 : 사용자와 데이터베이스를 연결시켜주는 소프트웨어&lt;/li&gt;
      &lt;li&gt;데이터베이스 : 데이터를 저장하는 곳&lt;/li&gt;
      &lt;li&gt;데이터 모델 : 연관된 데이터를 저장하는 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-14-database-03-01.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터베이스-사용자&quot;&gt;데이터베이스 사용자&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;일반사용자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;프로그래머가 개발한 응용프로그램을 사용하여 데이터베이스에 접근&lt;/li&gt;
      &lt;li&gt;DBMS 사용에 관심이 없고, 요청하여 받은 데이터의 내용에만 관심을 가짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;응용프로그래머 / 데이터베이스 프로그래머&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;일반 사용자가 사용할 수 있는 응용 프로그램을 개발&lt;/li&gt;
      &lt;li&gt;자바, JSP, PHP, ASP, C 등의 프로그래밍 언어를 사용하여 일반 사용자를 위한 인터페이스(GUI)와 데이터 관리 프로그램을 개발&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터베이스 관리자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터베이스 시스템을 관리하는 사람&lt;/li&gt;
      &lt;li&gt;데이터 설계, 구현, 유지보수 등을 담당&lt;/li&gt;
      &lt;li&gt;데이터베이스 사용자, 보안, 접근 권한, 백업, 회복 등을 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;dbms의-기능&quot;&gt;DBMS의 기능&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 정의 (Definition)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터의 구조를 정의, 수정 및 삭제하는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 조작 (Manipulation)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;응용프로그램의 요청으로 데이터의 삽입, 수정, 삭제하는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 추출 (Retrieval)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;응용프로그램의 요청에 따라 필요한 데이터를 추출하는 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 제어 (Control)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사용자를 관리 (계정 생성, 접근 제한)하는 기능&lt;/li&gt;
      &lt;li&gt;백업, 회복, 동시성 제어 등의 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;데이터-언어-data-language&quot;&gt;데이터 언어 (Data Language)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 데이터베이스 관리 시스템을 사용하기 위한 언어&lt;/li&gt;
  &lt;li&gt;사용 목적에 따라 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 정의어 (DDL, Data Definition Language)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터의 구조를 정의, 수정, 삭제하기 위해 사용하는 언어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 조작어(DML, Data Manupulation Language)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터의 삽입, 수정, 삭제, 검색 등의 요청을 위해 사용하는 언어&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;절차적 데이터 조작어와 비절차적 데이터 조작어로 구분&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;절차적 데이터 조작어 (Procedural DML) : 사용자가 원하는 데이터와 데이터를 얻는 처리 방법을 설명하는 조작어&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;비절차적 데이터 조작어 (Nonprocedural DML) : 사용자가 원하는 데이터만 설명하는 조작어&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 제어어(DCL, Data Control Language)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;내부적으로 필요한 규칙이나 기법을 정의하기 위해 사용하는 언어&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;규칙이나 기법을 정의하는 이유&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;무결성 : 데이터베이스에 정확하고 유효한 데이터만 유지한다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;보안 : 허가받지 않은 사용자의 데이터 접근 차단 및 허가된 사용자가 접근 허용된 데이터만 접근하도록 제어&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;회복 : 장애 발생시 데이터의 일관성을 유지&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;동시성 : 다수의 사용자가 같은 데이터에 동시에 접근하여 데이터를 조작할 수 있도록 제어&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-14-database-03-02.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/02/14/database-03/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/02/14/database-03/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 데이터베이스 모델</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-13-database-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이테베이스-모델&quot;&gt;데이테베이스 모델&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;연관된 데이터를 사용하기 쉽고, 연관 관계를 잘 표현할 수 있도록 구조적으로 표현한 방식이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-계층형-데이터베이스-모델&quot;&gt;1. 계층형 데이터베이스 모델&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 트리 형태의 구조를 가진 데이터베이스 
- 반복적인 부모-자식 관계 정보를 표현 
- 현재 거의 사용되지 않고 있다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-13-database-02-01.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-네트워크형-데이터베이스-모델&quot;&gt;2. 네트워크형 데이터베이스 모델&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 그래프 형태의 데이터베이스  
- 예) IDS(Integrated Data Store), Univac DMS-1100 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-13-database-02-02.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-관계-데이터베이스&quot;&gt;3. 관계 데이터베이스&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 모든 데이터 사이의 관계를 2차원 테이블 형태로 구현  
- 현재 대부분의 데이터베이스에서 사용 
- 예) 오라클, MySQL, MS-SQL, Informix, Access 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-13-database-02-03.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-객체형-데이터베이스&quot;&gt;4. 객체형 데이터베이스&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 객체지향 프로그래밍에서 사용되는 객체의 형태로 정보를 저장하는 데이터베이스  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-13-database-02-04.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-객체관계형-데이터베이스&quot;&gt;5. 객체관계형 데이터베이스&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 객체지향 데이터베이스와 관계 데이터베이스를 결합한 데이터베이스  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 13 Feb 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/02/13/database-02/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/02/13/database-02/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 데이터베이스</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020-02-12-database-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터와-정보&quot;&gt;데이터와 정보&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;데이터&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;일련의 작업을 목적으로 수집된 의미있는 값&lt;/li&gt;
      &lt;li&gt;연구나 조사 등의 바탕이 되는 재료&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정보&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;뜻을 가지는 자료&lt;/li&gt;
      &lt;li&gt;특정한 목적의 의사결정을 위하여 가공한 형태&lt;/li&gt;
      &lt;li&gt;일정한 형식으로 표현한 모든 종류의 자료 또는 지식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;파일시스템&quot;&gt;파일시스템&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;정의&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터를 파일에 저장하고, 파일을 수정, 삭제, 검색하는 기능을 제공하여 사용자가 파일을 손쉽게 이용할 수 있도록 지원하는 프로그램.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;각각의 응용 프로그램은 데이터를 고유의 형식에 맞추어 관리&lt;/li&gt;
      &lt;li&gt;응용 프로그램마다 독립적인 파일을 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;데이터가 중복되어 저장된다.&lt;/li&gt;
      &lt;li&gt;여러 파일에 중복되어 저장된 데이터가 변동될 때, 일치시키기 어렵다.&lt;/li&gt;
      &lt;li&gt;프로그램에 종속된 데이터를 다른 목적의 프로그램에서 사용하기 어렵다.&lt;/li&gt;
      &lt;li&gt;데이터 보안을 유지하기 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터베이스&quot;&gt;데이터베이스&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;도입 배경&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;파일 시스템의 단점 극복&lt;/li&gt;
      &lt;li&gt;다수 사용자의 정보 공유&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개념&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;다수의 사용자가 데이터를 공유하여 사용할 수 있도록 통합하여 저장한 데이터 집합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;장점&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 공유 및 용이한 접근&lt;/li&gt;
      &lt;li&gt;데이터 중복 최소화, 일관성, 무결성, 보안성 유지&lt;/li&gt;
      &lt;li&gt;데이터의 표준화 가능&lt;/li&gt;
      &lt;li&gt;데이터의 저장 공간 절약 및 집중화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단점&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;전문가가 필요&lt;/li&gt;
      &lt;li&gt;데이터 백업과 복구의 어려움&lt;/li&gt;
      &lt;li&gt;비용 부담&lt;/li&gt;
      &lt;li&gt;다수의 사용자가 동시 사용시 집중된 데이터 사용에 과부하 발생 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터베이스-관리-시스템&quot;&gt;데이터베이스 관리 시스템&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;정의&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DBMS(DataBase Management System)&lt;/li&gt;
      &lt;li&gt;데이터베이스에 저장된 데이터를 관리하고, 필요한 정보를 생성해주는 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특징&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터의 중복 및 불일치 최소화시킬 수 있다.&lt;/li&gt;
      &lt;li&gt;데이터 독립성을 유지할 수 있다.&lt;/li&gt;
      &lt;li&gt;DBMS를 통하여 데이터에 접근하고, 데이터베이스내의 데이터 변화가 응용프로그램에게 영향을 끼치지 않도록 하여 데이터의 독립성을 지원&lt;/li&gt;
      &lt;li&gt;데이터 무결성 유지할 수 있다.&lt;/li&gt;
      &lt;li&gt;무결성을 위반하는 데이터 저장 거절&lt;/li&gt;
      &lt;li&gt;데이터를 표준화시킬 수 있다.  · 데이터의 보안이 향상된다.&lt;/li&gt;
      &lt;li&gt;데이터베이스에 접근할 수 있는 권한을 사용자부여하여 접근을 제한할 수 있다.&lt;/li&gt;
      &lt;li&gt;데이터 공유가 쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 12 Feb 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/02/12/database-01/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/02/12/database-01/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
  </channel>
</rss>
