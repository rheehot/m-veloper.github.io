<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>m_veloper</title>
    <description></description>
    <link>https://m-veloper.github.io/</link>
    <atom:link href="https://m-veloper.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 05 Apr 2020 23:06:16 +0900</pubDate>
    <lastBuildDate>Sun, 05 Apr 2020 23:06:16 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[유닉스] 파일 시스템 마운트 와 복구</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;파일-시스템-마운트&quot;&gt;파일 시스템 마운트&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;유닉스 시스템은 주변장치를 파일로 취급&lt;/li&gt;
  &lt;li&gt;마이크로소프트의 윈도우즈에서는 장치들이 시스템 부팅 시 자동으로 인식되거나, 새로 연결한 하드웨어도 PnP(Plug and Play) 기능에 의해 자동 인식됨&lt;/li&gt;
  &lt;li&gt;유닉스는 주변장치 사용을 위해 시스템 부팅 후 mount 명령을 이용해 수동으로 작업. 작업 후 umount시켜야 함&lt;/li&gt;
  &lt;li&gt;마운트 : 특정 장치를 특정 디렉토리처럼 사용하기 위해 장치와 디렉토리를 연결하는 작업&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mount 명령의 일반 형식&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mount –a [-fnrvw] [-t 파일 시스템 타입] [-O optlist]
  mount [-fnrvw] [-o options] device | directory
  mount [-fnrvw] [-t 파일 시스템 타입] [-o options] device directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;-a 옵션은 /etc/fstab에 명시된 모든 파일 시스템을 마운트할 때 사용&lt;/li&gt;
      &lt;li&gt;-o 옵션은 특별한 옵션들을 지정할 때 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-23-01.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;device directory는 마운트할 장치의 시스템 파일을 지정&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;플로피 디스크 장치는 /dev/fd&lt;/li&gt;
      &lt;li&gt;CD-ROM은 /dev/cdrom&lt;/li&gt;
      &lt;li&gt;테이프 장치는 /dev/st0&lt;/li&gt;
      &lt;li&gt;하드디스크 장치는 /dev/hda&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mount 명령만 입력하면 현재 시스템에 마운트되어 있는 파일 시스템들의 종류를 볼 수 있음&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CD-ROM을 사용하기 위해 CD-ROM 장치를 마운트&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ mount –t iso9660 /dev/cdrom /media/cdrom
  mount: block device /dev/sr0 is write-protected, mounting read-only
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;시디롬 장치가 읽기만 가능하다는 메시지&lt;/li&gt;
      &lt;li&gt;/media/cdrom 디렉토리에 가면 CD의 내용을 볼 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CD-ROM 장치를 모두 사용한 후에는 언마운트&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ umount /dev/cdrom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;usb 장치를 사용하기 위한 마운트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;usb 파일 시스템의 타입은 vfat&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ mount –t vfat /dev/sdb1 /mnt/usb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;파일-시스템-복구&quot;&gt;파일 시스템 복구&lt;/h1&gt;

&lt;h3 id=&quot;fsck-filesystem-check-명령&quot;&gt;fsck (filesystem check) 명령&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파일 시스템을 검사하고 수리&lt;/li&gt;
  &lt;li&gt;손상된 디렉토리나 파일을 수정할 때 임시로 /lost+found 디렉토리에서 작업을 수행하고 정상적인 복구가 되면 사라짐&lt;/li&gt;
  &lt;li&gt;/lost+found 디렉토리에 파일들이 많이 쌓여있다면 깨진 파일이 많다는 증거&lt;/li&gt;
  &lt;li&gt;형식 : fsck [옵션] 장치명&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-23-02.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;etcfstab&quot;&gt;/etc/fstab&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파일 시스템에 대한 다양한 정보를 담고 있는 파일&lt;/li&gt;
  &lt;li&gt;부팅 시에 마운트할 파티션 정보가 기록되어 있는 파일&lt;/li&gt;
  &lt;li&gt;파티션 정보를 변경하였거나 디스크를 추가한 경우 이 파일에 등록해야 부팅 시에 자동으로 마운트할 수 있음&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tstab : File System Table&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ vi /etc/fstab
  /dev/fd0 /mnt/floppy auto noauto,owner 0 0
  ......
  /dev/hda5 swap swap defaults 0 0
  /dev/cdrom /media/cdrom iso9660 noauto,owner,kudzu,ro 0 0
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;/dev/cdrom : 장치의 이름&lt;/li&gt;
      &lt;li&gt;/media/cdrom : 마운트될 디렉토리&lt;/li&gt;
      &lt;li&gt;iso9660 : 파일 시스템의 종류&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;defaults&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;마운트될 때 여러 가지 옵션 중 하나&lt;/li&gt;
          &lt;li&gt;일반 사용자가 마운트할 수 없게 함&lt;/li&gt;
          &lt;li&gt;프로그램 실행 및 읽기/쓰기, 비동기, 블록을 나타낼 때 사용&lt;/li&gt;
          &lt;li&gt;noauto : 장치가 부팅될 때 자동으로 마운트될 수 없음을 나타냄&lt;/li&gt;
          &lt;li&gt;여러 가지 옵션들은 콤마(,)를 사용해 한꺼번에 정해줄 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/05/unix-23/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/05/unix-23/</guid>
        
        <category>unix</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[유닉스] 디스크 사용 정보, df 명령어, du 명령어</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;df-disk-free-명령어&quot;&gt;df (disk free) 명령어&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파일 시스템의 사용 중이거나 사용 가능한 디스크 공간에 대한 정보를 출력&lt;/li&gt;
  &lt;li&gt;디스크의 크기, 사용량, 남아있는 용량 등&lt;/li&gt;
  &lt;li&gt;형식 : df [옵션]&lt;/li&gt;
  &lt;li&gt;옵션&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-22-01.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ df
    Filesystem 1k-blocks Used Available Use% Mounted on
    /dev/sda1 7608792 338004 3819240 47% /
    udev 244040 4 244036 1% /dev
    ......
    $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-22-02.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;특정 장치에 대한 사용량만을 보고 싶다면 알고 싶은 장치의 이름을 써주면 됨&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ df /dev/hda1
  Filesystem 1k-blocks Used Available Use% Mounted on
  /dev/hda1 14749280 1448544 13300736 10% /windows
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;du-disk-usage-명령어&quot;&gt;du (disk usage) 명령어&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;디스크 사용량을 요약해서 보여주는 명령어&lt;/li&gt;
  &lt;li&gt;파일이나 디렉토리들이 디스크에서 차지하고 있는 크기를 출력&lt;/li&gt;
  &lt;li&gt;파일명이나 디렉토리명을 지정하지 않으면 현재 디렉토리 정보를 출력&lt;/li&gt;
  &lt;li&gt;형식 : du [옵션] [파일명]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-04-05-unix-22-03.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;디렉토리를 지정하면 디렉토리와 그 안에 들어 있는 모든 서브디렉토리의 디스크 사용량을 보여줌&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ du /mnt
  4 /mnt/cdrom
  4 /mnt/floppy
  12 /mnt
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/05/unix-22/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/05/unix-22/</guid>
        
        <category>unix</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 집계 함수 - AVG(평균), SUM(합), COUNT</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;avg평균-sum합-count&quot;&gt;AVG(평균), SUM(합), COUNT&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;특정 속성 값을 통계적으로 계산한 결과를 검색&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;집계 함수 (Aggregate Function)를 사용&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;열 함수 (Column Function)라고도 함&lt;/li&gt;
      &lt;li&gt;개수, 합계, 평균, 최댓값, 최솟값의 계산을 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;집계 함수&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-01.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;[주의 사항]
        &lt;ul&gt;
          &lt;li&gt;NULL 인 속성 값은 제외하고 계산함.&lt;/li&gt;
          &lt;li&gt;WHERE 절에서는 사용할 수 없고 SELECT 절과 HAVING 절에서만 사용할 수 있음.
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제에 사용할 판매 데이터베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Customer 테이블&lt;/li&gt;
      &lt;li&gt;Items 테이블&lt;/li&gt;
      &lt;li&gt;Orders 테이블&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-03.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-04.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;avg평균&quot;&gt;AVG(평균)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SELECT AVG ( price ) FROM items;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-05.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;속성이름으로 AVG(price)을 사용함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AS 키워드를 사용해 이름을 부여&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;새이름에 공란이 포함된 경우 작음따옴표로 묶는다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT AVG ( price ) AS 평균단가 FROM items;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-06.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT AVG ( price ) AS ‘평균 단가’ FROM items;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-07.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sum합계&quot;&gt;SUM(합계)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Orders 테이블에서 2015-06-01 부터 2015-06-02 까지 주문한 제품 개수의 합계를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT SUM( qty ) AS ‘총 주문 수량’ FROM orders WHERE date &amp;gt;= ‘2015-06-01’ AND date &amp;lt;= ‘2015-06-02’;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-08.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;count&quot;&gt;COUNT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;COUNT 함수
    &lt;ul&gt;
      &lt;li&gt;테이블의 모든 속성에 적용하여 개수를 계산할 수 있음.&lt;/li&gt;
      &lt;li&gt;NULL 값은 제외 시킴&lt;/li&gt;
      &lt;li&gt;중복된 값도 모두 별도 계산함&lt;/li&gt;
      &lt;li&gt;기본키 속성이나 * 를 이용해 개수를 계산함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에 등록되어 있는 고객의 수를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;계정( account ) 속성을 이용해 계산하는 경우&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT COUNT( account ) AS 고객수 FROM customer;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-09.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;등급( grade ) 속성을 이용해 계산하는 경우&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT COUNT( grade ) AS 고객수 FROM customer;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-10.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;주소( address ) 속성을 이용해 계산하는 경우&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT COUNT( address ) AS 고객수 FROM customer;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-10.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;(*) 를 이용해 계산하는 경우&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;(*) 는 모든 속성을 의미하는 기호&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;모든 속성 값으로 구성된 투플을 대상으로 개수를 계산&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;SELECT COUNT( * ) AS 고객수 FROM customer;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-11.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orders 테이블에서 주문된 제품( item )의 수를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT COUNT( item ) AS 주문수 FROM orders;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-12.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT COUNT( DISTINCT item ) AS 제품수 FROM orders;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-28-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/03/database-28/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/03/database-28/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 정렬 검색 - ORDER BY 를 이용한 검색</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;정렬-검색---order-by-를-이용한-검색&quot;&gt;정렬 검색 - ORDER BY 를 이용한 검색&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;SELECT 문의 검색 결과 테이블의 투플 순서는 DBMS에서 정한 순서로 출력됨&lt;/li&gt;
  &lt;li&gt;결과 테이블의 내용을 사용자가 원하는 순서로 출력하는 방법 ==&amp;gt; ORDER BY 키워드 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본 형식&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT [ ALL ㅣ DISTINCT ] 속성_리스트&lt;br /&gt;
FROM 테이블_리스트&lt;br /&gt;
[ WHERE 조건 ]&lt;br /&gt;
[ ORDER BY 속성_리스트 [ ASC ㅣ DESC ] ];
&lt;br /&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;ORDER BY 속성_리스트 : 정렬 기준이 되는 속성을 지정&lt;/li&gt;
          &lt;li&gt;여러 기준에 따라 정렬하기 위하여 정렬 기준이 되는 속성을 차례로 제시&lt;/li&gt;
          &lt;li&gt;ASC : 오름차순 정렬&lt;/li&gt;
          &lt;li&gt;DESC : 내림차순 정렬&lt;/li&gt;
          &lt;li&gt;기본 정렬 방식 – 오름차순 정렬&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정렬&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오름차순 정렬 : 알파벳 순서 / 사전 순서, ASCII 코드의 순서&lt;/li&gt;
      &lt;li&gt;내림차순 정렬 : 오름차순의 반대&lt;/li&gt;
      &lt;li&gt;NULL 값의 출력 위치
        &lt;ul&gt;
          &lt;li&gt;오름차순 – 첫 번째 출력&lt;/li&gt;
          &lt;li&gt;내림차순 - 맨 마지막에 출력&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제에 사용할 판매 데이터베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Customer 테이블&lt;/li&gt;
      &lt;li&gt;Items 테이블&lt;/li&gt;
      &lt;li&gt;Orders 테이블&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-03.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 계정(account), 이름(name), 등급(grade)를 검색하되, 계정(account)을 내림차순으로 정렬하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT account, name, grade FROM customer ORDER BY account DESC;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-04.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orders 테이블에서 주문 수량(qty)이 10개 미만인 주문의 고객계정(customer), 제품코드(item), 수량(qty),
주문일자를 검색하시오. 단, 제품코드를 기준으로 오름차순으로 정렬하고, 동일 제품은 수량을 기준으로 내림차순으로
정렬하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT customer, item, qty, date FROM orders WHERE qty &amp;lt; 10 ORDER BY item ASC, qty DESC;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-05.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Items 테이블의 품명(name) 과 가격(price)를 검색하되, 가격(price)를 내림차순으로 검색하여 NULL의 위치를
확인하고, 다시 오름차순으로 검색하여 NULL의 위치를 확인하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT name, price FROM items ORDER BY price DESC;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-06.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT name, price FROM items ORDER BY price ASC;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-27-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/03/database-27/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/03/database-27/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 조건 검색 - NULL 을 이용한 검색</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;조건-검색---null-을-이용한-검색&quot;&gt;조건 검색 - NULL 을 이용한 검색&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;검색 조건에서 속성의 값이 NULL인지 비교하기 ==&amp;gt; IS NULL 키워드 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;검색 조건에서 속성의 값이 NULL이 아닌지 비교하기 ==&amp;gt; IS NOT NULL 키워드 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제에 사용할 판매 데이터베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Customer 테이블&lt;/li&gt;
      &lt;li&gt;Items 테이블&lt;/li&gt;
      &lt;li&gt;Orders 테이블&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-03.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 주소(address)가 입력되지 않은 고객의 account, name을 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;[TIP]&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;NULL인지 비교하기 위하여 속성이름=NULL을 사용하면 안됨&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;투플을 수정 (UPDATE) 할 경우&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;UPDATE customer SET address=NULL WHERE account=’king’;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;옳은 질의문&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT account, name FROM customer WHERE address IS NULL;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-04.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;잘못된 질의문&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT account, name FROM customer WHERE address=NULL;
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-05.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문자열-데이터-타입과-null-값&quot;&gt;문자열 데이터 타입과 NULL 값&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 주소(address)가 입력된 고객의 이름(name)과 주소(address)를 검색하시오.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[TIP]&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;CHAR 데이터타입의 값을 ‘ ’와 같이 데이터를 전혀 입력하지 않은 것과 NULL은 다름&lt;/li&gt;
      &lt;li&gt;INT의 0 값은 NULL과 다름&lt;/li&gt;
      &lt;li&gt;문자열 값이 입력되지 않은 속성은 NULL 값을 주는 것이 좋음&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;INT 값을 입력하지 않을 경우, DEFAULT를 사용하여 0 으로 초기화하는 것이 좋음&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;옳은 질의문&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT name, address FROM customer WHERE address IS NOT NULL;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-06.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;잘못된 질의문&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;NULL 이 아닌 조건은 ‘ &amp;lt; &amp;gt; NULL ’을 사용하면 안됨.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;SELECT name, address FROM customer WHERE address &amp;lt;&amp;gt; NULL;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-07.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;속성값은 ‘ ’와 같이 빈 문자열을 사용한 질의문&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT name, address FROM customer WHERE address=’’;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-08.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;int-테이터-타입의-null-크기-비교&quot;&gt;INT 테이터 타입의 NULL 크기 비교&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Items 테이블에서 단가(price) 값을 입력하지 않은 제품의 코드(code), 이름(name)을 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT code, name FROM items WHERE price IS NULL;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-09.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Items 테이블에서 단가(price)가 0원인 제품의 코드(code), 이름(name)을 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT code, name FROM items WHERE price=0;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-10.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Items 테이블에서 단가가 2000원 미만인 제품의 코드(code), 제품명(name), 단가(price)를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;[TIP]
        &lt;ul&gt;
          &lt;li&gt;NULL 값은 숫자로 비교할 수 없다.&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;NULL 값은 다른 값과 크기를 비교하면 항상 FALSE 이다.&lt;/p&gt;

            &lt;p&gt;price &amp;gt; 2000&lt;br /&gt;
  price &amp;lt; 2000&lt;br /&gt;
  price &amp;lt;&amp;gt; 2000&lt;br /&gt;
  price &amp;gt;= 2000&lt;br /&gt;
  price &amp;lt;= 2000&lt;br /&gt;
  price = 2000&lt;br /&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;SELECT code, name FROM items WHERE price &amp;lt; 2000;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-26-11.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/03/database-26/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/03/database-26/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 조건 검색 - LIKE 를 이용한 검색</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;조건-검색---like-를-이용한-검색&quot;&gt;조건 검색 - LIKE 를 이용한 검색&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;검색 조건을 정확히 모르는 경우&lt;/li&gt;
  &lt;li&gt;부분적으로 일치하는 데이터를 검색하려는 경우 ==&amp;gt; LIKE 키워드를 사용&lt;/li&gt;
  &lt;li&gt;검색 조건을 정확히 알면 = 연산자로 조건을 표현&lt;/li&gt;
  &lt;li&gt;LIKE 키워드는 문자열을 이용하는 조건에만 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LIKE 키워드와 같이 사용할 수 있는 기호&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-01.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LIKE 키워드의 사용 예
&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-02.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제에 사용할 판매 데이터베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Customer 테이블&lt;/li&gt;
      &lt;li&gt;Items 테이블&lt;/li&gt;
      &lt;li&gt;Orders 테이블&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-05.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 성이 김씨인 name, account, grade를 검색하시오.&lt;/p&gt;

    &lt;p&gt;-SELECT name, account, grade FROM customer WHERE name LIKE ‘김%’;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-06.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 account가 5자인 고객의 account, name, grade를 검색하시오.&lt;/p&gt;

    &lt;p&gt;SELECT account, name, grade FROM customer WHERE account LIKE ‘_ _ _ _ _’ ;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-07.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 name(이름)의 마지막자가 ‘동’인 고객의 name, grade를 검색하시오. ( name을 3자로가정한 경우 )&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;[TIP]&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;한글 코드가 2바이트라고 하여, 검색시 한글 한글자를 ‘_ _’으로 사용하면 안된다.&lt;/li&gt;
          &lt;li&gt;한글 문자도 밑줄 한 개로 표현한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;올바른 질의문&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT name, grade FROM customer WHERE name LIKE ‘_ _동’;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;잘못된 질의문&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT name, grade FROM customer WHERE name LIKE ‘_ _ _ _동’;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-08.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer 테이블에서 name(이름)이 ‘동‘으로 끝나는 고객의 name, credit을 검색하시오. ( 이름의 길이가 몇 자인지 지정할 필요가 없는 경우 )&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT name, grade FROM customer WHERE name LIKE ‘%동’;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-09.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orders 테이블에서 ‘경기’로 발송된 주문의 item, date. saddr를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT item, date, saddr FROM orders WHERE saddr LIKE ‘%경기%’;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-25-10.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/03/database-25/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/03/database-25/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 조건 검색(WHERE 절)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;조건-검색where-절&quot;&gt;조건 검색(WHERE 절)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;조건을 만족하는 데이터만 검색&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SELECT [ ALL ㅣ DISTINCT ] 속성_리스트&lt;br /&gt;
FROM 테이블_리스트&lt;br /&gt;
[ WHERE 조건 ] ;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제에 사용할 판매 데이터베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Customer 테이블&lt;/li&gt;
      &lt;li&gt;Items 테이블&lt;/li&gt;
      &lt;li&gt;Orders 테이블&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-03.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건에 사용하는 비교 연산자&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-04.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건에 사용하는 논리 연산자&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-05.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;items 테이블에서 재고량 (stocks)이 20이상인 제품의 code, name, stocks를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT code, name, stocks FROM items WHERE stocks &amp;gt;= 20;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-06.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orders 테이블에서 apple 계정의 고객의 10 개 이상 주문한 item 과 qty, date를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT item, qty, date FROM orders WHERE customer = ’apple’ AND qty &amp;gt;= 10;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-07.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orders 테이블에서 apple 고객이 주문했거나 10 개 이상 주문된 customer, item, qty, date를 검색하시오.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT customer, item, qty, date FROM orders WHERE customer = ’apple’ OR qty &amp;gt;= 10 ;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-08.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Items 테이블에서 단가(price)가 3000원 이상이고 5000원 미만인 제품의 이름(name)과, 재고량(stocks)를&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT name, stocks FROM items WHERE price &amp;gt;= 3000 AND price &amp;lt; 5000 ; 
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-24-09.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/03/database-24/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/03/database-24/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Database] 데이터 조작어(DML) - SELECT 문 (데이터 검색)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터-조작어dml---select-문-데이터-검색&quot;&gt;데이터 조작어(DML) - SELECT 문 (데이터 검색)&lt;/h1&gt;

&lt;h3 id=&quot;sql의-데이터-조작-기능&quot;&gt;SQL의 데이터 조작 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 검색, 삽입, 수정, 삭제&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 검색 : SELECT - 테이블에서 조건에 맞는 튜플을 검색함&lt;/li&gt;
      &lt;li&gt;데이터 삽입 : INSERT - 테이블에 새로운 튜플을 삽입함&lt;/li&gt;
      &lt;li&gt;데이터 수정 : UPDATE - 테이블의 조건에 맞는 튜플의 내용을 변경함&lt;/li&gt;
      &lt;li&gt;데이터 삭제 : DELETE - 테이블에서 조건에 맞는 튜플을 삭제함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제에 사용할 판매 데이터베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Customer 테이블&lt;/li&gt;
      &lt;li&gt;Items 테이블&lt;/li&gt;
      &lt;li&gt;Orders 테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-검색select-문&quot;&gt;데이터 검색(SELECT 문)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 검색 (SELECT 문)의 개요&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT 키워드와 함께 검색하고 싶은 속성의 이름 나열&lt;/li&gt;
      &lt;li&gt;FROM 키워드와 함께 검색하고 싶은 속성이 있는 테이블의 이름 나열&lt;/li&gt;
      &lt;li&gt;검색 결과 : 테이블 형태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본 검색&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;SELECT [ ALL ㅣ DISTINCT ] 속성_리스트&lt;br /&gt;
FROM 테이블_리스트;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;질의&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Customer 테이블에 존재하는 모든 속성을 검색하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT account, name, grade, credit, address FROM customer;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-05.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Customer 테이블에 존재하는 모든 속성을 검색하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;*는 모든 속성을 나타냄 (속성의 순서가 테이블의 속성순서와 동일)&lt;/li&gt;
          &lt;li&gt;SELECT * FROM customer
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-06.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Orders 테이블에서 주문한 item 만 검색하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;SELECT item FROM orders
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;결과 테이블의 투플이 중복되어 있음.
                &lt;ul&gt;
                  &lt;li&gt;관계 데이터 모델의 일반 릴레이션은 동일한 투플이 존재할 수 없음&lt;/li&gt;
                  &lt;li&gt;SELECT 문의 수행 결과로 반환되는 테이블에서는 동일한 투플이 중복될 수 있음&lt;/li&gt;
                  &lt;li&gt;결과 테이블이 중복을 허용할 수 있도록 명시적으로 지시하기 위하여 ALL을 사용&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Orders 테이블에서 주문한 item을 검색하되, 명시적으로 결과 투플의 중복을 허용하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT ALL item FROM orders;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-08.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Orders 테이블에서 주문한 item을 검색하되, 중복을 제거하고 한번씩만 출력되도록 하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;결과 테이블의 투플 중복을 제거하기 위하여 DISTINCT를 사용&lt;/li&gt;
          &lt;li&gt;SELECT DISTINCT item FROM orders;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-09.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;items 테이블에서 name, stocks, price를 검색하되, 출력되는 이름으로 ‘이름’, ‘재고’, ‘단가’ 의 이름을 사용하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT name as 이름, stocks as 재고, price as 단가 from items;
  &lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-10.png&quot; alt=&quot;&quot; /&gt;
  &lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SELECT 다음의 속성_리스트에 산술식을 제시할 수 있다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;산술식 : 속성이름 +, -, *, / 등의 산술 연산자와 상수&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;items 테이블에서 name과 price 속성을 검색하되, price에 500원을 더해 조정단가라는 이름으로 출력하시오.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;SELECT name, price + 500 as 조정단가 FROM items;&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/database/2020/04/2020-04-03-database-23-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/04/03/database-23/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/04/03/database-23/</guid>
        
        <category>database</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[자바스크립트] 날짜 포맷 함수(Date 포맷 함수)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/javascript/2020-04-02-tip-javascript-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;날짜-포맷-함수date-포맷-함수&quot;&gt;날짜 포맷 함수(Date 포맷 함수)&lt;/h1&gt;
&lt;h3 id=&quot;date-format-javascript&quot;&gt;Date format javascript&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;moment.js 플러그인을 쓰면 더 많은 기능들이 있습니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하지만 아래처럼 직접 공통된 js 파일에 선언하고 날짜 포맷만 사용하셔도 됩니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // script
  Date.prototype.format = function(f) {
      if (!this.valueOf()) return &quot; &quot;;
     
      var weekName = [&quot;일요일&quot;, &quot;월요일&quot;, &quot;화요일&quot;, &quot;수요일&quot;, &quot;목요일&quot;, &quot;금요일&quot;, &quot;토요일&quot;];
      var d = this;
         
      return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\/p)/gi, function($1) {
          switch ($1) {
              case &quot;yyyy&quot;: return d.getFullYear();
              case &quot;yy&quot;: return (d.getFullYear() % 1000).zf(2);
              case &quot;MM&quot;: return (d.getMonth() + 1).zf(2);
              case &quot;dd&quot;: return d.getDate().zf(2);
              case &quot;E&quot;: return weekName[d.getDay()];
              case &quot;HH&quot;: return d.getHours().zf(2);
              case &quot;hh&quot;: return ((h = d.getHours() % 12) ? h : 12).zf(2);
              case &quot;mm&quot;: return d.getMinutes().zf(2);
              case &quot;ss&quot;: return d.getSeconds().zf(2);
              case &quot;a/p&quot;: return d.getHours() &amp;lt; 12 ? &quot;오전&quot; : &quot;오후&quot;;
              default: return $1;
          }
      });
  };
     
  String.prototype.string = function(len){
      var s = '', i = 0; while (i++ &amp;lt; len) { s += this; } return s;
  };
  String.prototype.zf = function(len){return &quot;0&quot;.string(len - this.length) + this;};
  Number.prototype.zf = function(len){return this.toString().zf(len);};
    
    
  // 확인하기
  console.log(new Date().format(&quot;yyyy년 MM월 dd일 a/p hh시 mm분 ss초&quot;));
     
  console.log(new Date().format(&quot;yyyy-MM-dd&quot;));
     
  console.log(new Date().format(&quot;'yy MM.dd&quot;));
     
  console.log(new Date().format(&quot;yyyy-MM-dd E&quot;));
     
  console.log(&quot;현재년도 : &quot; + new Date().format(&quot;yyyy&quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 02 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/04/02/tip-javascript-13/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/04/02/tip-javascript-13/</guid>
        
        <category>javascript</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[CSS] 웹 폰트 적용하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/css/2020-04-02-tip-css-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;css-웹-폰트-적용하기&quot;&gt;CSS 웹 폰트 적용하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;웹 폰트는 상업과 개인용으로 이용이 가능한 Noto Sans CJK KR(본고딕)을 예로 들겠습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;에 접속합니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원하는 폰트를 선택후 Embed 탭에서 &amp;lt; link &amp;gt; 로 할지, @import 로 할지 선택합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@import&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;CSS 파일 맨 상단에 아래와 같이 선언&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;@import url(‘https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100&amp;amp;display=swap’);&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;선택자에 폰트 적용: font-family: ‘Noto Sans KR’, sans-serif;&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100&amp;amp;display=swap');
        
  body {
    font-family: 'Noto Sans KR', sans-serif;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt; link &amp;gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&amp;lt; link href=”https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100&amp;amp;display=swap” rel=”stylesheet” &amp;gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 02 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/04/02/tip-css-02/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/04/02/tip-css-02/</guid>
        
        <category>css</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[자바스크립트] 제이쿼리로 table td 또는 ul li 값 가져오기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/javascript/2020-04-01-tip-javascript-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;제이쿼리로-table-td-또는-ul-li-값-가져오기&quot;&gt;제이쿼리로 table td 또는 ul li 값 가져오기&lt;/h1&gt;
&lt;h3 id=&quot;how-to-get-the-text-value-of-td-or-lihtml&quot;&gt;How to get the text value of td or li(html)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;간단히 this 를 사용해서 가져옵니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아이디를 직접 정의하기 보다는 클래스로 정의해서 사용합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // html
    
  &amp;lt;table&amp;gt;
      &amp;lt;tr class=&quot;test-td&quot;&amp;gt;
          &amp;lt;td&amp;gt;값1&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;값2&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;값3&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;값4&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
    
    
  &amp;lt;ul class=&quot;test-li&quot;&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;여기1&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;여기2&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;여기3&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;여기4&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
   
   
   
  // script
    
  $(&quot;.test-td td&quot;).click(function(){
      console.log($(this).text());
  });
    
  $(&quot;.test-li li span&quot;).click(function(){
      console.log($(this).text());
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/04/01/tip-javascript-12/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/04/01/tip-javascript-12/</guid>
        
        <category>javascript</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[자바스크립트] 아이디, 이메일 유효성 검사</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/javascript/2020-03-31-tip-javascript-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;자바스크립트로-아이디-이메일-유효성-검사&quot;&gt;자바스크립트로 아이디, 이메일 유효성 검사&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;아이디와 패스워드가 적합한지 검사하는 정규식 입니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이메일이 적합한지 검사하는 정규식 입니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ﻿function validate() {
    
      // 아이디와 패스워드가 적합한지 검사할 정규식
      // 4자~ 12자 사이
      var regexIdAndPw = /^[a-zA-Z0-9]{4,12}$/ 
    
     // 이메일이 적합한지 검사할 정규식
      var regexEmail = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i; 
    
      var id = document.getElementById(&quot;id&quot;);
      var pw = document.getElementById(&quot;pw&quot;);
      var email = document.getElementById(&quot;email&quot;);
    
      if(!check(regexIdAndPw ,id,&quot;아이디는 4~12자의 영문 대소문자와 숫자로만 입력&quot;)) {
          return false;
      }
    
      if(!check(regexIdAndPw ,pw,&quot;패스워드는 4~12자의 영문 대소문자와 숫자로만 입력&quot;)) {
          return false;
      }
    
      if(!check(regexEmail ,email,&quot;이메일에 적합한 주소가 아닙니다.&quot;)) {
          return false;
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 31 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/31/tip-javascript-11/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/31/tip-javascript-11/</guid>
        
        <category>javascript</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[Chart.js] 차트 사이즈 고정하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/chartjs/2020-03-31-tip-chartjs-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;chartjs-툴팁-사이즈-변경하기&quot;&gt;Chart.js 툴팁 사이즈 변경하기&lt;/h1&gt;
&lt;h3 id=&quot;how-to-setting-canvas-width-and-height-for-fixed-size-in-chartjs&quot;&gt;How to setting canvas width and height for fixed size in chart.js&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;responsive 옵션을 true 값을 주면 브라우저 사이즈가 바뀔 때 마다 사이즈가 비율에 맞게 변함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;responsive 옵션을 false 값을 주면 브라우저 사이즈가 바뀌어도 “&amp;lt; style &amp;gt;” 태그 안에 고정시킨 사이즈 대로 고정됨.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;style&amp;gt;
      canvas{
        width:1000px !important;
        height:600px !important;
      }
  &amp;lt;/style&amp;gt;

  // html
  &amp;lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
    
  &amp;lt;script&amp;gt;
      var ctx = document.getElementById('myChart').getContext('2d');
      var myChart = new Chart(ctx, {
          type: 'bar',
          data: {
              labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
              datasets: [{
                  label: '# of Votes',
                  data: [12, 19, 3, 5, 2, 3],
                  backgroundColor: [
                      'rgba(255, 99, 132, 0.2)',
                      'rgba(54, 162, 235, 0.2)',
                      'rgba(255, 206, 86, 0.2)',
                      'rgba(75, 192, 192, 0.2)',
                      'rgba(153, 102, 255, 0.2)',
                      'rgba(255, 159, 64, 0.2)'
                  ],
                  borderColor: [
                      'rgba(255, 99, 132, 1)',
                      'rgba(54, 162, 235, 1)',
                      'rgba(255, 206, 86, 1)',
                      'rgba(75, 192, 192, 1)',
                      'rgba(153, 102, 255, 1)',
                      'rgba(255, 159, 64, 1)'
                  ],
                  borderWidth: 1
              }]
          },
          options: {
              responsive: true,
              maintainAspectRatio: false,
                  scales: {
                      yAxes: [{
                          ticks: {
                              beginAtZero:true
                          }
                      }]
                  }
              }
          });
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/31/tip-chartjs-03/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/31/tip-chartjs-03/</guid>
        
        <category>chart.js</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[JSTL] 콤마(,) 또는 소수점 사용법</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/jstl/2020-03-30-tip-jstl-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;콤마-또는-소수점-사용법&quot;&gt;콤마(,) 또는 소수점 사용법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jsp 페이지 상단에 아래의 코드를 선언 하고 사용한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;%@ taglib prefix=”fmt” uri=”http://java.sun.com/jsp/jstl/fmt” %&amp;gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;fmt:formatNumber value=&quot;12341234&quot; type=&quot;number&quot;/&amp;gt;
  // 결과 : 12,341,234 ( 천 단위마다 &quot;,&quot;로 끊어줌 )
    
  &amp;lt;fmt:formatNumber value=&quot;1234&quot; type=&quot;currency&quot; currencySymbol=&quot;￦&quot;/&amp;gt;
  // 결과 : ￦1234.00 ( ￦표시 붙인 후, 천 단위마다 &quot;,&quot; 표시 후 소수점 2자리까찌 표현함 )
    
  &amp;lt;fmt:formatNumber value=&quot;0.35&quot; type=&quot;percent&quot;/&amp;gt;
  // 결과 : 35% ( %로 표현함 )
    
  &amp;lt;fmt:formatNumber value=&quot;1234.1234&quot; pattern=&quot;.00&quot;/&amp;gt;
  // 결과 : 1234.12 ( pattern 에 표시한 자리수만큼 반올림함 )
    
  &amp;lt;fmt:parseNumber var=&quot;test&quot; value=&quot;1234.12&quot; integerOnly=&quot;true&quot; /&amp;gt;
  // 결과 : var에 test라고 선언 한 값을 출력 시 ( ${test} 소수점 이하 버림 ) &amp;gt; 1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/30/tip-jstl-03/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/30/tip-jstl-03/</guid>
        
        <category>jstl</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[JAVA] 자바 소수점 사용하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/java/2020-03-30-tip-java-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;소수점-사용하기&quot;&gt;소수점 사용하기&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Math.round() 를 이용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  public class Round{
     public static void main(String args[]){
        System.out.println(Math.round(67.655*100)/100.0);
     }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;Math.round 함수의 역할은 소수점 첫번째 자리를 참조하여 반올림을 시키는 것이다.
그러나 소수점 몇 번째자리까지 필요할 때 바로 위의 방식을 쓰자
67.655*100을 하면 6765.5가 된다.
여기서 round가 적용되면 6766이 된다.
다시 100.0 여기서 .0을 붙여야 실수로 적용이 되어 나온다.
하면 67.66이 된다!! 세번째 자리에서 반올림하여 나오는것이다.
100이라는 값을 1000으로 하면 네번째자리에서 반올림이 되고
10을 하면 두번째자리이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;System.out.printf() 혹은 format() 을 이용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ﻿System.out.printf(&quot;%.2f&quot;, 33.3333); //결과값 33.33﻿
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;이때 뒤에 들어가는 파라메터에 정수를 입력하게 되면?
IllegalFormatConversionException 가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;String.format() 을 이용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ﻿float f = 0.55555f
    
  String str = String.format(&quot;%.2f&quot;, f);
    
  System.out.println(&quot;str = &quot; + str);
    
  str = 0.56
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DecimalFormat 을 이용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  float f 의 소수점 두번째 자리까지의 값을 String str 로 변환합니다.
    
  float f = 0.55555f
    
  DecimalFormat format = new DecimalFormat(&quot;.##&quot;);
    
  String str = format.format(f);
    
  System.out.println(&quot;str = &quot; + str); //str = 0.55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/30/tip-java-04/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/30/tip-java-04/</guid>
        
        <category>java</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[Chart.js] 툴팁 사이즈 변경하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/chartjs/2020-03-29-tip-chartjs-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;chartjs-툴팁-사이즈-변경하기&quot;&gt;Chart.js 툴팁 사이즈 변경하기&lt;/h1&gt;
&lt;h3 id=&quot;how-to-change-font-size-for-tooltip-in-chartjs&quot;&gt;How to change font size for tooltip in chart.js&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;options 에 tooltips 을 선언하고 사용합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // html
  &amp;lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
    
  &amp;lt;script&amp;gt;
    
      var ctx = document.getElementById('myChart').getContext('2d');
      var myChart = new Chart(ctx, {
          type: 'bar',
          data: {
              labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
              datasets: [{
                  label: '# of Votes',
                  data: [12, 19, 3, 5, 2, 3],
                  backgroundColor: [
                      'rgba(255, 99, 132, 0.2)',
                      'rgba(54, 162, 235, 0.2)',
                      'rgba(255, 206, 86, 0.2)',
                      'rgba(75, 192, 192, 0.2)',
                      'rgba(153, 102, 255, 0.2)',
                      'rgba(255, 159, 64, 0.2)'
                  ],
                  borderColor: [
                      'rgba(255, 99, 132, 1)',
                      'rgba(54, 162, 235, 1)',
                      'rgba(255, 206, 86, 1)',
                      'rgba(75, 192, 192, 1)',
                      'rgba(153, 102, 255, 1)',
                      'rgba(255, 159, 64, 1)'
                  ],
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  yAxes: [{
                      ticks: {
                          beginAtZero: true
                      }
                  }]
              }
              tooltips: {
                  titleFontSize: 10,
                  bodyFontSize: 10
              }
          }
      });
        
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 29 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/29/tip-chartjs-02/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/29/tip-chartjs-02/</guid>
        
        <category>chart.js</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[Chart.js] 도넛차트 굵기 조절, 변경하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/chartjs/2020-03-27-tip-chartjs-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;chartjs-도넛차트-굵기-조절-변경하기&quot;&gt;Chart.js 도넛차트 굵기 조절, 변경하기&lt;/h1&gt;
&lt;h3 id=&quot;how-to-vary-the-thickness-of-doughnut-chart-using-chartjs&quot;&gt;How to vary the thickness of doughnut chart, using Chart.Js&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;cutoutPercentage 또는 percentageInnerCutout 를 사용하세요&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // html
  &amp;lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
    
  &amp;lt;script&amp;gt;
    
      var ctx = document.getElementById('myChart').getContext('2d');
        
      var myDoughnutChart = new Chart(ctx, {
          type: 'doughnut',
          data: data,
          options: {
             cutoutPercentage: 65
          }
      });
        
      // 또는
        
      var myDoughnutChart = new Chart(ctx, {
          type: 'doughnut',
          data: data,
          options: {
             percentageInnerCutout: 65
          }
      });
    
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/27/tip-chartjs-01/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/27/tip-chartjs-01/</guid>
        
        <category>chart.js</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[JAVA] 자바 날짜 차이구하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/java/2020-03-26-tip-java-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;자바-날짜-차이구하기&quot;&gt;자바 날짜 차이구하기&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void calculateDateBetweenAandB(){

    String dateA = &quot;2019-08-27&quot;;
    String dateB = &quot;2019-09-09&quot;;
 
    // String Type을 Date Type으로 캐스팅하면서 생기는 예외로 인해 여기서 
    예외처리 해주지 않으면 컴파일러에서 에러가 발생해서 컴파일을 할 수 없다.
    
    try{ 
        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);

        // date1, date2 두 날짜를 parse()를 통해 Date형으로 변환.
        Date FirstDate = format.parse(dateA);
        Date SecondDate = format.parse(dateB);
        
        // Date로 변환된 두 날짜를 계산한 뒤 그 리턴값으로 long type 변수를 초기화 하고 있다.
        // 연산결과 -950400000. long type 으로 return 된다.
        long calDate = FirstDate.getTime() - SecondDate.getTime(); 
        
        // Date.getTime() 은 해당날짜를 기준으로1970년 00:00:00 부터 몇 초가 흘렀는지를 반환해준다. 
        // 이제 24*60*60*1000(각 시간값에 따른 차이점) 을 나눠주면 일수가 나온다.
        long calDateDays = calDate / ( 24*60*60*1000); 
 
        calDateDays = Math.abs(calDateDays);//절대값으로 출력
        
        System.out.println(&quot;두 날짜의 날짜 차이: &quot;+calDateDays);
    }
    catch(ParseException e){
            // 예외 처리
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 26 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/26/tip-java-03/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/26/tip-java-03/</guid>
        
        <category>java</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[자바스크립트] 자바스크립트로 문자열 공백 제거하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/javascript/2020-03-25-tip-javascript-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;자바스크립트로-문자열-공백-제거하기&quot;&gt;자바스크립트로 문자열 공백 제거하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;콘솔창에서 확인할 때는 꼭 마우스로 드래그 해서 공백 제거 유무를 눈으로 확인하세요.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let str = &quot; 바보야, 바 보니? &quot;;
    
  console.log(str);
    
  console.log(str.replace(/(\s*)/g,&quot;&quot;)); // 문자열의 모든 공백 제거
    
  console.log(str.replace(/^\s*/,&quot;&quot;)); // 문자열의 제일 앞에 공백 제거
    
  console.log(str.replace(/\s*$/,&quot;&quot;)); // 문자열의 제일 뒤에 공백 제거
    
  console.log(str.trim());             // 문자열 제일 앞, 제일 뒤 공백 제거 (trim 함수 사용)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/25/tip-javascript-10/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/25/tip-javascript-10/</guid>
        
        <category>javascript</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[CSS] user agent stylesheet은 무엇일까?</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/css/2020-03-24-tip-css-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;user-agent-stylesheet&quot;&gt;user agent stylesheet?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;margin 값을 정해두지 않아 브라우저 임의대로 설정한 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;간혹 css 작업을 하고 결과물을 보는데 생각했던 모습하고 약간 다른 경우가 있습니다.&lt;/p&gt;

&lt;p&gt;제대로 css를 작성한 거 같은데 “개발자 도구”로 살펴보면 이상한 문구와 같이 체크해제가 되지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/css/2020-03-24-tip-css-01-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;원래는 각 옵션들을 체크 해제하면서 확인이 가능해야 하는데, “user agent stylesheet” 이란 문구와 함께 css로 설정하지 않은 margin이 들어가 있는 걸 볼 수 있습니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/css/2020-03-24-tip-css-01-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;분명 저는 css로 정확히 파란색 사각형 안에 인증번호가 들어가도록 했는데, 결과물은 사뭇 다릅니다.&lt;/p&gt;

&lt;p&gt;위의 이미지와 같이 margin이 들어가 있습니다. 제가 의도한 것도 아닌데 말이죠.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;해결방법&quot;&gt;해결방법&lt;/h1&gt;

&lt;p&gt;간혹 브라우저마다, 혹은 해당 영역이 다르게 보일 수 있습니다.&lt;/p&gt;

&lt;p&gt;저의 경우, 브라우저는 크롬을 사용했지만, 똑같은 메일을 “네이버 메일” 과 “Gmail”에서 열어보면 결과가 다른 걸 확인했었습니다. 네이버는 정상적으로 보였지만 Gmail에서는 위의 그림처럼&lt;/p&gt;

&lt;p&gt;user agent stylesheet 문구와 함께 강제로 margin이 들어가는 현상이 발생했습니다.&lt;/p&gt;

&lt;p&gt;하지만 해결 방법은 의외로 간단합니다.&lt;/p&gt;

&lt;p&gt;작성한 html 태그의 css 작성 코드에 margin이 있는지 없는지 다시 확인해보시기 바랍니다.&lt;/p&gt;

&lt;p&gt;margin이 없는 경우가 대부분일 겁니다. 이때 margin을 입력해 주시면 됩니다.&lt;/p&gt;

&lt;p&gt;내부 스타일 시트(Internal Style Sheet)인 &lt;style&gt;&lt;/style&gt; 안에다가 정의를 하던, Inline Styles로 정의를 하던 margin을 입력해 주면 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Inline Styles로 예를 들어보겠습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;ul class=&quot;slides&quot; style=&quot;margin:0;padding:0&quot;&amp;gt;
    
  &amp;lt;p style='color:#999; font-size: 2rem; font-weight: bold; margin:0; padding:0'&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/24/tip-css-01/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/24/tip-css-01/</guid>
        
        <category>css</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[MySQL/MariaDB] CASE WHEN 사용법</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/mysql/2020-03-23-tip-mysql-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;case-when&quot;&gt;CASE WHEN&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본 사용법&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ﻿CASE
      WHEN '조건'
      THEN '대체값'
      WHEN '조건'
      THEN '대체값'
      ELSE 'WHEN 조건에 해당안될경우의 기본값'
  END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ﻿SELECT 
      SUM(
          CASE 
              WHEN test_column = 1 
              THEN test_column + 2 
              ELSE 0 
          END
      ) AS testValue 
  FROM testTable
  WHERE start_no = #{startNo} AND start_dt BETWEEN #{startDt} AND #{endDt}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/23/tip-mysql-05/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/23/tip-mysql-05/</guid>
        
        <category>mysql</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[MySQL/MariaDB] 반올림, 자릿수 버리기(ROUND,TRUNCATE)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/mysql/2020-03-23-tip-mysql-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;반올림-자릿수-버리기roundtruncate&quot;&gt;반올림, 자릿수 버리기(ROUND,TRUNCATE)&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ROUND(숫자,반올림할 자릿수) : 숫자를 반올림할 자릿수 +1 자릿수에서 반올림&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TRUNCATE(숫자,버릴 자릿수)  : 숫자를 버릴 자릿수 아래로 버림 ※ 반드시 버릴 자릿수를 명시해 주어야 함&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  SELECT ROUND(3456.1234567) FROM DUAL
  // 3456
     
  SELECT ROUND(3456.1234567 ,1) FROM DUAL
  // 3456.1
     
  SELECT ROUND(3456.1234567 ,4) FROM DUAL
  // 3456.1235
     
  SELECT ROUND(3456.1234567 ,-1) FROM DUAL
  // 3460
     
  SELECT ROUND(3456.1234567 ,-2) FROM DUAL
  // 3500
    
    
  SELECT TRUNCATE(3456.1234567 ,1) FROM DUAL;
  // 3456.1
     
  SELECT TRUNCATE(3456.1234567 ,4) FROM DUAL;
  // 3456.1234
     
  SELECT TRUNCATE(3456.1234567 ,-1) FROM DUAL;
  // 3450
     
  SELECT TRUNCATE(3456.1234567 ,-2) FROM DUAL;
  // 3400 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/23/tip-mysql-04/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/23/tip-mysql-04/</guid>
        
        <category>mysql</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[MySQL/MariaDB] 최대값 최소값 구하기(MAX, MIN)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/mysql/2020-03-23-tip-mysql-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;최대값-최소값-구하기max-min&quot;&gt;최대값 최소값 구하기(MAX, MIN)&lt;/h1&gt;
&lt;h3 id=&quot;how-to-get-min-and-max-date-in-mysql&quot;&gt;How to get min and max date in MySQL&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;최대값 (MAX) 구하기&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  SELECT MAX (컬럼) FROM 테이블
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;최소값(MIN) 구하기&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  SELECT MIN (컬럼) FROM 테이블
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/23/tip-mysql-03/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/23/tip-mysql-03/</guid>
        
        <category>mysql</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[자바스크립트] 제이쿼리(jQuery)로 select box(셀렉트 박스) 값 가져오기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/javascript/2020-03-23-tip-javascript-09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;제이쿼리jquery로-select-box셀렉트-박스-값-가져오기&quot;&gt;제이쿼리(jQuery)로 select box(셀렉트 박스) 값 가져오기&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;select id=&quot;myselect&quot; onchange=&quot;selectTest();&quot;&amp;gt;
        &amp;lt;option value=&quot;1&quot;&amp;gt;일번&amp;lt;/option&amp;gt;
        &amp;lt;option value=&quot;2&quot;&amp;gt;이번&amp;lt;/option&amp;gt;
        &amp;lt;option value=&quot;3&quot;&amp;gt;삼번&amp;lt;/option&amp;gt;
        &amp;lt;option value=&quot;4&quot;&amp;gt;사번r&amp;lt;/option&amp;gt;
        &amp;lt;option value=&quot;5&quot;&amp;gt;오번&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
    
    &amp;lt;script&amp;gt;
     function selectTest(){
        var testA = $(&quot;#myselect &amp;gt; option:selected&quot;).val(); //선택된 옵션의 value 가져오기
        console.log(testA);
    
        var testB = $( &quot;#myselect option:selected&quot; ).text(); //선택된 옵션의 text 가져오기
        console.log(testB);
     }
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/23/tip-javascript-09/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/23/tip-javascript-09/</guid>
        
        <category>javascript</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[Sass/SCSS] 내장 함수(Built-in Functions)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/sass/2020-03-22-sass-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;내장-함수built-in-functions&quot;&gt;내장 함수(Built-in Functions)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Sass에서 기본적으로 제공하는 내장 함수에는 많은 종류가 있습니다.&lt;/li&gt;
  &lt;li&gt;모두 소개하지 않고, 주관적 경험에 의거해 필요하거나 필요할 수 있는 함수만 정리했습니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sass-lang.com/documentation/modules&quot;&gt;Sass Built-in Functions&lt;/a&gt;에서 모든 내장 함수를 확인할 수 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;[]는 선택 가능한 인수(argument)입니다.&lt;/li&gt;
      &lt;li&gt;Zero-based numbering을 사용하지 않습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;색상rgb--hsl--opacity-함수&quot;&gt;색상(RGB / HSL / Opacity) 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;mix($color1, $color2) : 두 개의 색을 섞습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lighten($color, $amount) : 더 밝은색을 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;darken($color, $amount) : 더 어두운색을 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;saturate($color, $amount) : 색상의 채도를 올립니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;desaturate($color, $amount) : 색상의 채도를 낮춥니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;grayscale($color) : 색상을 회색으로 변환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;invert($color) : 색상을 반전시킵니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rgba($color, $alpha) : 색상의 투명도를 변경합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;opacify($color, $amount) / fade-in($color, $amount) : 색상을 더 불투명하게 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;transparentize($color, $amount) / fade-out($color, $amount) : 색상을 더 투명하게 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;문자string-함수&quot;&gt;문자(String) 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;unquote($string) : 문자에서 따옴표를 제거합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;quote($string) : 문자에 따옴표를 추가합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;str-insert($string, $insert, $index) : 문자의 index번째에 특정 문자를 삽입합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;str-index($string, $substring) : 문자에서 특정 문자의 첫 index를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;str-slice($string, $start-at, [$end-at]) : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;to-upper-case($string) : 문자를 대문자를 변환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;to-lower-case($string) : 문자를 소문자로 변환합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;숫자number-함수&quot;&gt;숫자(Number) 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;percentage($number) : 숫자(단위 무시)를 백분율로 변환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;round($number) : 정수로 반올림합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ceil($number) : 정수로 올림합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;floor($number) : 정수로 내림(버림)합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;abs($number) : 숫자의 절대 값을 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;min($numbers…) : 숫자 중 최소 값을 찾습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;max($numbers…) : 숫자 중 최대 값을 찾습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;random() : 0 부터 1 사이의 난수를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;list-함수&quot;&gt;List 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;모든 List 내장 함수는 기존 List 데이터를 갱신하지 않고 새 List 데이터를 반환합니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 List 내장 함수는 Map 데이터에서도 사용할 수 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;length($list) : List의 개수를 반환합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;nth($list, $n) : List에서 n번째 값을 반환합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;set-nth($list, $n, $value) : List에서 n번째 값을 다른 값으로 변경합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;join($list1, $list2, [$separator]) : 두 개의 List를 하나로 결합합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;zip($lists…) : 여러 List들을 하나의 다차원 List로 결합합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;index($list, $value) : List에서 특정 값의 index를 반환합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;map-함수&quot;&gt;Map 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;모든 Map 내장 함수는 기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;map-get($map, $key) : Map에서 특정 key의 value를 반환합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;map-merge($map1, $map2) : 두 개의 Map을 병합하여 새로운 Map를 만듭니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;map-keys($map) : Map에서 모든 key를 List로 반환합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;map-values($map) : Map에서 모든 value를 List로 반환합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;관리introspection-함수&quot;&gt;관리(Introspection) 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;variable-exists(name) : 변수가 현재 범위에 존재하는지 여부를 반환합니다.(인수는 $없이 변수의 이름만 사용합니다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unit($number) : 숫자의 단위를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unitless($number) : 숫자에 단위가 있는지 여부를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;comparable($number1, $number2) : 두 개의 숫자가 연산 가능한지 여부를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고-자료references&quot;&gt;참고 자료(References)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://sass-lang.com/documentation&lt;/li&gt;
  &lt;li&gt;https://sass-guidelin.es/ko/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    본 포스팅은 HEROPY 님의 영상과 블로그를 보고 공부한 내용을 정리한 것입니다.
    https://heropy.blog/2018/01/31/sass/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/03/22/sass-15/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/03/22/sass-15/</guid>
        
        <category>sass</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[Sass/SCSS] 반복문(for,each, while)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/sass/2020-03-22-sass-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;for-함수&quot;&gt;for (함수)&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@for는 스타일을 반복적으로 출력합니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@for는 through를 사용하는 형식과 to를 사용하는 형식으로 나뉩니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // through
  // 종료 만큼 반복
  @for $변수 from 시작 through 종료 {
    // 반복 내용
  }
    
  // to
  // 종료 직전까지 반복
  @for $변수 from 시작 to 종료 {
    // 반복 내용
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // 1부터 3번 반복
  @for $i from 1 through 3 {
    .through:nth-child(#{$i}) {
      width : 20px * $i
    }
  }
    
  // 1부터 3 직전까지만 반복(2번 반복)
  @for $i from 1 to 3 {
    .to:nth-child(#{$i}) {
      width : 20px * $i
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled to:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; .through:nth-child(1) { width: 20px; }
 .through:nth-child(2) { width: 40px; }
 .through:nth-child(3) { width: 60px; }
   
 .to:nth-child(1) { width: 20px; }
 .to:nth-child(2) { width: 40px; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;to는 주어진 값 직전까지만 반복해야할 경우 유용할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;그러나 :nth-child()에서 특히 유용하게 사용되는 @for는 일반적으로 through를 사용하길 권장합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;each&quot;&gt;@each&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@each는 List와 Map 데이터를 반복할 때 사용합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @each $변수 in 데이터 {
   // 반복 내용
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; // List Data
 $fruits: (apple, orange, banana, mango);
   
 .fruits {
   @each $fruit in $fruits {
     li.#{$fruit} {
       background: url(&quot;/images/#{$fruit}.png&quot;);
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled to:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  .fruits li.apple {
    background: url(&quot;/images/apple.png&quot;);
  }
  .fruits li.orange {
    background: url(&quot;/images/orange.png&quot;);
  }
  .fruits li.banana {
    background: url(&quot;/images/banana.png&quot;);
  }
  .fruits li.mango {
    background: url(&quot;/images/mango.png&quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;조건에는 논리 연산자 and, or, not을 사용할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $fruits: (apple, orange, banana, mango);
   
 .fruits {
   @each $fruit in $fruits {
     $i: index($fruits, $fruit);
     li:nth-child(#{$i}) {
       left: 50px * $i;
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled to:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; .fruits li:nth-child(1) {
   left: 50px;
 }
 .fruits li:nth-child(2) {
   left: 100px;
 }
 .fruits li:nth-child(3) {
   left: 150px;
 }
 .fruits li:nth-child(4) {
   left: 200px;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;동시에 여러 개의 List 데이터를 반복 처리할 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단, 각 데이터의 Length가 같아야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $apple: (apple, korea);
  $orange: (orange, china);
  $banana: (banana, japan);
    
  @each $fruit, $country in $apple, $orange, $banana {
    .box-#{$fruit} {
      background: url(&quot;/images/#{$country}.png&quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled to:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  .box-apple {
    background: url(&quot;/images/korea.png&quot;);
  }
  .box-orange {
    background: url(&quot;/images/china.png&quot;);
  }
  .box-banana {
    background: url(&quot;/images/japan.png&quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Map 데이터를 반복할 경우 하나의 데이터에 두 개의 변수가 필요합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @each $key변수, $value변수 in 데이터 {
    // 반복 내용
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $fruits-data: (
    apple: korea,
    orange: china,
    banana: japan
  );
    
  @each $fruit, $country in $fruits-data {
    .box-#{$fruit} {
      background: url(&quot;/images/#{$country}.png&quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled to:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  .box-apple {
    background: url(&quot;/images/korea.png&quot;);
  }
  .box-orange {
    background: url(&quot;/images/china.png&quot;);
  }
  .box-banana {
    background: url(&quot;/images/japan.png&quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;while&quot;&gt;@while&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;@while은 조건이 false로 평가될 때까지 내용을 반복합니다.&lt;/li&gt;
  &lt;li&gt;잘못된 조건으로 인해 컴파일 중 무한 루프에 빠질 수 있습니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용을 권장하지 않습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @while 조건 {
    // 반복 내용
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCSS:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $i: 6;
    
  @while $i &amp;gt; 0 {
    .item-#{$i} {
      width: 2px * $i;
    }
    $i: $i - 2;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled to:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; .item-6 { width: 12px; }
 .item-4 { width: 8px; }
 .item-2 { width: 4px; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    본 포스팅은 HEROPY 님의 영상과 블로그를 보고 공부한 내용을 정리한 것입니다.
    https://heropy.blog/2018/01/31/sass/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/03/22/sass-14/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/03/22/sass-14/</guid>
        
        <category>sass</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[자바스크립트] 제이쿼리(jQuery)로 select box 값 고정하기/ 변경하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/javascript/2020-03-21-tip-javascript-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;제이쿼리jquery로-select-box-값-고정하기-변경하기&quot;&gt;제이쿼리(jQuery)로 select box 값 고정하기/ 변경하기&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // value값으로 설정
    $(&quot;#select_id&quot;).val(&quot;1&quot;).prop(&quot;selected&quot;, true);

    // optipn의 순서값으로 설정
    $(&quot;#select_id option:eq(0)&quot;).prop(&quot;selected&quot;, true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 21 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/tip/2020/03/21/tip-javascript-08/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/tip/2020/03/21/tip-javascript-08/</guid>
        
        <category>javascript</category>
        
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>[유닉스] 포그라운드(foreground), 백그라운드(background)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;포그라운드foreground-백그라운드background&quot;&gt;포그라운드(foreground), 백그라운드(background)&lt;/h1&gt;

&lt;h3 id=&quot;포그라운드와-백그라운드-작업의-이해&quot;&gt;포그라운드와 백그라운드 작업의 이해&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;쉘은 프로세스를 작업(job) 단위로 관리&lt;/li&gt;
  &lt;li&gt;유닉스는 동시에 여러 작업을 할 수 있는 다중 작업(Multitasking) 운영체제&lt;/li&gt;
  &lt;li&gt;포그라운드(foreground, 전위) 처리와 백그라운드(background, 후위) 처리 방식으로 동작&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;포그라운드-처리&quot;&gt;포그라운드 처리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 입력한 명령이 실행되어 결과가 출력될 때까지 프롬프트가 출력되지 않아 다른 명령을 입력할 수 없어 기다려야 하는 경우&lt;/li&gt;
  &lt;li&gt;사용자가 명령을 입력하면 쉘이 명령을 해석하여 실행한 결과를 화면에 출력&lt;/li&gt;
  &lt;li&gt;사용자는 화면에 출력된 결과를 보고 다시 명령을 입력하여 대화식 작업을 함&lt;/li&gt;
  &lt;li&gt;포그라운드 프로세스 : 포그라운드 처리로 실행되고 있는 프로세스, 포그라운드 작업&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;포그라운드 처리의 예&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ find / -name passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;find 명령이 끝날 때까지 기다려야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;백그라운드-처리&quot;&gt;백그라운드 처리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;포그라운드 처리 방식은 한 번에 하나의 명령만 실행시키므로 여러 프로세스를 동시에 실행시킬 수 없음&lt;/li&gt;
  &lt;li&gt;백그라운드 처리 방식은 여러 프로세스를 동시에 실행시킬 수 있음&lt;/li&gt;
  &lt;li&gt;명령의 처리가 끝나는 것과 관계없이 곧바로 프롬프트가 출력되어 사용자가 다른 작업을 계속할 수 있음&lt;/li&gt;
  &lt;li&gt;백그라운드 프로세스 : 백그라운드 방식으로 처리되는 프로세스, 백그라운드 작업&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;명령을 백그라운드로 실행하려면 명령의 마지막에 ＆(앰퍼샌드) 기호를 추가&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ find / -name text ＆
  [1] 6715
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;백그라운드 프로세스는 실행 결과와 오류 메시지를 화면에 그대로 출력&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 작업할 때 방해받을 수 있으므로 출력 방향 전환하여 실행 결과를 파일로 저장&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ find / -name passwd &amp;gt; pw.dat ＆
  [2] 6725
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오류 메시지를 출력 방향 전환하여 파일로 저장&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ find / -name passwd &amp;gt; pw.dat 2&amp;gt; pw.err ＆
  [3] 6726
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;다른 작업을 하는 도중 백그라운드 작업이 종료되면 Enter 키를 입력했을 때 백그라운드 작업 종료 메시지가 출력됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;포그라운드와-백그라운드-작업-제어&quot;&gt;포그라운드와 백그라운드 작업 제어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;작업 제어 : 작업 전환, 실행 중지, 작업 종료&lt;/li&gt;
  &lt;li&gt;작업 전환 : 포그라운드 작업을 백그라운드 작업으로 전환, 백그라운드 작업을 포그라운드 작업으로 전환&lt;/li&gt;
  &lt;li&gt;실행 중지 : 작업을 잠시 중단시키는 것&lt;/li&gt;
  &lt;li&gt;작업 종료 : 프로세스 종료처럼 작업을 종료시키는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;작업-목록-보기&quot;&gt;작업 목록 보기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;jobs 명령
    &lt;ul&gt;
      &lt;li&gt;백그라운드 작업을 모두 보여줌. 특정 작업 번호 지정하면 해당 작업의 정보만 보여줌&lt;/li&gt;
      &lt;li&gt;형식 : jobs [%작업]&lt;/li&gt;
      &lt;li&gt;%작업
        &lt;ul&gt;
          &lt;li&gt;%번호 : 해당 번호의 작업 정보 출력&lt;/li&gt;
          &lt;li&gt;%+ 또는 %% : 작업 순서가 +인 작업 정보 출력&lt;/li&gt;
          &lt;li&gt;%- : 작업 순서가 –인 작업 정보 출력&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용 예 : jobs %1, jobs&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ sleep 100＆
  [1] 6751
  $ sleep 200＆
  [2] 6752
  $ jobs
  [1]- Running sleep 100 ＆
  [2]+ Running sleep 200 ＆
  $ jobs %1
  [1]- Running sleep 100 ＆
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-21-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;작업-전환하기&quot;&gt;작업 전환하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;fg 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;백그라운드 프로세스를 포그라운드 프로세스로 전환&lt;/li&gt;
      &lt;li&gt;사용법 : fg [%작업번호]&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;백그라운드로 수행 중인 작업이 여러 개인 경우 가장 최근에 수행한 작업(보통 + 기호가 붙어 있는 작업)을 포그라운드로 전환&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ jobs
  [3]+ Running sleep 150 ＆
  $ fg
  sleep 150
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bg 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;포그라운드 프로세스를 백그라운드 프로세스로 전환&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ sleep 150
  ^Z
  [3]+ Stopped sleep 150
  $ bg
  [3]+ sleep 150 ＆
  $ jobs
  [2]- Running sleep 200 ＆
  [3]+ Running sleep 150 ＆
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;작업-종료시키기&quot;&gt;작업 종료시키기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;포그라운드 작업은 Ctrl+C를 입력하면 종료됨
    &lt;ul&gt;
      &lt;li&gt;Ctrl+C는 인터럽트 시그널을 포그라운드 프로세스에 전달&lt;/li&gt;
      &lt;li&gt;프로세스는 인터럽트를 받으면 기본적으로 종료&lt;/li&gt;
      &lt;li&gt;종료시키고자 하는 프로세스의 PID를 다른 터미널에서 찾아 강제로 종료시키는 방법도 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;백그라운드 작업은 kill 명령으로 종료&lt;/li&gt;
  &lt;li&gt;kill 명령의 인자로 PID 대신 ‘%작업 번호’도 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;로그아웃-후에도-백그라운드-작업-계속-실행하기&quot;&gt;로그아웃 후에도 백그라운드 작업 계속 실행하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;nohup 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;로그아웃 후에도 백그라운드 작업을 계속 실행시킴&lt;/li&gt;
      &lt;li&gt;실행 중인 프로세스의 표준 출력과 표준 에러는 ‘nohup.out’이라는 파일을 생성하여 기록,&lt;/li&gt;
      &lt;li&gt;nohup 명령행 뒤에 ‘＆’를 명시해야 함&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;형식 : nohup 명령＆&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ nohup find / -name passwd ＆
  [1] 7050
  $ nohup: ignoring input and appending output to ‘nohup.out’
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;사용자-전환하기&quot;&gt;사용자 전환하기&lt;/h1&gt;

&lt;h3 id=&quot;로그인한-모든-사용자-정보-보기&quot;&gt;로그인한 모든 사용자 정보 보기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;users 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;현재 시스템에 로그인하고 있는 사용자명 출력&lt;/li&gt;
      &lt;li&gt;명령의 결과를 한 행으로 출력&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;형식 : users&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ users
  ksshin ksshin
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;who 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;시스템을 사용하고 있는 사용자의 자세한 정보 출력&lt;/li&gt;
      &lt;li&gt;사용자명, 사용자가 접속한 단말기 번호, 사용자가 로그인한 시간, 외부 컴퓨터 이름이나 IP 주소 등&lt;/li&gt;
      &lt;li&gt;형식 : who [옵션]&lt;/li&gt;
      &lt;li&gt;옵션
        &lt;ul&gt;
          &lt;li&gt;-q : 사용자명만 출력&lt;/li&gt;
          &lt;li&gt;-H : 출력 항목의 제목도 함께 출력&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;-b : 마지막으로 재부팅한 날짜와 시간 출력&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ who
  ksshin tty1 2015-06-10 14:42
  ksshin :0 2015-06-10 14:38 (:0)
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;w 명령&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;로그인한 사용자 정보와 현재 작업의 정보 출력&lt;/li&gt;
      &lt;li&gt;사용자 정보 외에 시스템 정보도 출력&lt;/li&gt;
      &lt;li&gt;시스템 정보 : 현재 시간, 시스템이 부팅된 후 현재까지 경과된 기간, 로그인하고 있는 사용자 수, 실행 대기 중인 작업의 수&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용자 정보 : 사용자명, 단말기 번호, 로그인한 시간, 휴지(idle) 시간, JCPU, PCPU, 실행하고 있는 명령&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;휴지 시간 : 마지막 명령 실행 후부터 현재까지 작업하지 않고 있는 시간&lt;/li&gt;
          &lt;li&gt;JCPU : 로그인한 후 실행했던 전체 프로세스에서 사용한 CPU 시간&lt;/li&gt;
          &lt;li&gt;PCPU : 현재 실행 중인 프로세스가 사용한 CPU 시간&lt;/li&gt;
          &lt;li&gt;what : 현재 실행 중인 명령&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;형식 : w [사용자명]&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ w
  17:05:24 up 1 day, 15:41, 2 users, load average: 0.22, 0.16, 0.15
  USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT
  ksshin tty1 10 6월 15 4.00s 11.93s 0.09s w
  ksshin :0 :0 10 6월 15 ?xdm? 4:40m 5.36s init --user
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자신의-정보-보기&quot;&gt;자신의 정보 보기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;who am i 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;로그인 정보 출력&lt;/li&gt;
      &lt;li&gt;who 명령에 인자로 am i를 지정한 것&lt;/li&gt;
      &lt;li&gt;who 명령의 결과 중 자신에 대한 정보만 출력&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;whoami보다 상세한 사용자 정보 확인할 때 사용&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ who am i
  ksshin tty1 2015-06-10 14:42
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;whoami 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;자신의 로그인 사용자명 출력&lt;/li&gt;
      &lt;li&gt;가상콘솔을 사용하거나 여러 계정으로 동시에 로그인하고 있는 경우 현재 시스템을 사용하고 있는 사용자를확인할 때&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;형식 : whoami&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ whoami
  ksshin
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;id 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;현재 사용자의 로그인 ID와 그룹 정보 출력&lt;/li&gt;
      &lt;li&gt;사용자명, uid(사용자를 구분하는 번호), gid(그룹을 구분하는 번호) 정보 출력&lt;/li&gt;
      &lt;li&gt;형식 : id [옵션]&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;옵션 : -a : 모든 그룹 정보 출력&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ id
  uid=1001(user1) gid=1001(user1) groups=1001(user1)
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용자-전환하기-1&quot;&gt;사용자 전환하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;su 명령&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;다른 사용자로 전환&lt;/li&gt;
      &lt;li&gt;전환하려는 사용자의 비밀번호를 알고 있어야 함&lt;/li&gt;
      &lt;li&gt;형식 : su [-] [사용자명]&lt;/li&gt;
      &lt;li&gt;사용 예 : su, su – user1&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다시 돌아가려면 exit 명령 사용&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ su user1
  Password:
  $ whoami
  user1
  $ pwd
  /home/ksshin
  $ exit
  $ whoami
  ksshin
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ul&gt;
          &lt;li&gt;사용자가 ksshin에서 user1으로 전환하였지만 현재 디렉토리는 /home/ksshin&lt;/li&gt;
          &lt;li&gt;su 명령만 사용하면, 사용자는 전환되지만 디렉토리는 변하지 않음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;‘-’ 옵션을 사용하면 사용자의 초기화 파일을 실행시켜 작업 디렉토리도 변경&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ su - user1
  Password:
  $ pwd
  /home/user1
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;su 명령을 사용자 이름 지정 없이 사용하여 root로 전환&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ su
  Password:
  # whoami
  root
  #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 20 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/03/20/unix-21/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/03/20/unix-21/</guid>
        
        <category>unix</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[유닉스] 프로세스 관리 명령</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로세스-목록-보기&quot;&gt;프로세스 목록 보기&lt;/h1&gt;

&lt;h3 id=&quot;ps-명령&quot;&gt;ps 명령&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;현재 실행 중인 프로세스의 정보를 출력&lt;/li&gt;
  &lt;li&gt;형식 : ps [옵션]&lt;/li&gt;
  &lt;li&gt;옵션
    &lt;ul&gt;
      &lt;li&gt;-e : 시스템에서 실행 중인 모든 프로세스 정보 출력&lt;/li&gt;
      &lt;li&gt;-f : 프로세스에 대한 자세한 정보 출력&lt;/li&gt;
      &lt;li&gt;-u uid : 특정 사용자에 대한 모든 프로세스 출력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용 예 : ps, ps –ef, ps aux&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;현재-단말기의-프로세스-목록-출력&quot;&gt;현재 단말기의 프로세스 목록 출력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ps 명령을 옵션 없이 사용하면 현재 쉘이나 단말기 창에서 실행시킨 사용자 프로세스의 정보 출력&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps
  PID TTY TIME CMD
  2570 tty1 00:00:12 bash
  6710 tty1 00:00:00 ps
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로세스의-상세-정보-출력&quot;&gt;프로세스의 상세 정보 출력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;-f 옵션은 프로세스의 상세 정보 출력&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps –f
  UID PID PPID C STIME TTY TIME CMD
  ksshin 2570 1189 0 6월 16 tty1 00:00:12 -bash
  ksshin 7174 2570 0 17:42 tty1 00:00:00 ps -f
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;전체-프로세스-목록-출력-system-v-계열&quot;&gt;전체 프로세스 목록 출력 (System V 계열)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;-e 옵션은 시스템에서 실행 중인 모든 프로세스 출력&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TTY 값이 ‘?’인 것은 특정 터미널에서 실행되지 않은 프로세스로, 대부분 데몬&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps –e
  PID TTY TIME CMD
  1 ? 00:00:09 init
  2 ? 00:00:00 kthreadd
  3 ? 00:00:26 ksoftirqd/0
  5 ? 00:00:00 kworker/0:0H
  7 ? 00:00:24 rcu_sched
  ......
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전체 프로세스의 상세 정보 확인은 –e 옵션과 –f 옵션을 함께 사용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps –ef
  UID PID PPID C STIME TTY TIME CMD
  root 1 0 0 6월 16 ? 00:00:09 /sbin/init
  root 2 0 0 6월 16 ? 00:00:00 [kthreadd]
  root 3 2 0 6월 16 ? 00:00:26 [ksoftirqd/0]
  root 5 2 0 6월 16 ? 00:00:00 [kworker/0:0H]
  root 7 2 0 6월 16 ? 00:00:24 [rcu_sched]
  ......
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;전체-프로세스-목록-출력-bsd-계열&quot;&gt;전체 프로세스 목록 출력 (BSD 계열)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ps aux 명령&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps aux | more
  UID PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
  root 1 0.0 0.3 4572 1804 ? Ss 6월 25 0:14 /sbin/init
  root 2 0.0 0.0 0 0 ? S 6월 25 0:00 [kthread]
  root 3 0.0 0.0 0 0 ? S 6월 25 0:46 [ksoftirqd/0]
  root 5 0.0 0.0 0 0 ? S&amp;lt; 6월 25 0:00 [kworker/0:0H]
  root 7 0.0 0.0 0 0 ? S 6월 25 0:43 [rcu_sched]
  ......
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특정-사용자의-프로세스-목록-출력&quot;&gt;특정 사용자의 프로세스 목록 출력&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;-u 옵션은 특정 사용자가 실행시킨 프로세스의 목록 확인&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps –u ksshin
  PID TTY TIME CMD
  1693 ? 00:00:05 gnome-keyring-d
  1695 ? 00:00:05 init
  1767 ? 00:00:00 ssh-agent
  1772 ? 00:00:47 dbus-daemon
  1780 ? 00:00:00 upstart-event-b
  ......
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;특정-프로세스-정보-검색-명령&quot;&gt;특정 프로세스 정보 검색 명령&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ps 명령 이용&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps –ef | grep bash
  ksshin 2570 1189 0 6월 16 tty1 00:00:12 –bash
  ksshin 7205 2570 0 18:01 tty1 00:00:00 grep--color=auto bash
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pgrep 명령 이용&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;지정한 패턴과 일치하는 프로세스의 정보를 출력&lt;/li&gt;
      &lt;li&gt;형식 : pgrep [옵션] [패턴]&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;사용 예 : pgrep bash, pgrep –l –u ksshin&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ pgrep –l bash
  2570 bash
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20-04.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로세스의-종료&quot;&gt;프로세스의 종료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;응답 없는 프로세스나 불필요한 프로세스를 강제로 종료시키려면 해당 프로세스의 PID를 알아야 함&lt;/li&gt;
  &lt;li&gt;ps –ef 명령으로 프로세스의 PID와 PPID 확인 가능&lt;/li&gt;
  &lt;li&gt;PPID로 부모 프로세스를 종료시켜야 할 때도 있음&lt;/li&gt;
  &lt;li&gt;프로세스 종료시키는 명령 : kill, pkill&lt;/li&gt;
  &lt;li&gt;프로세스에 시그널을 보내 프로세스가 종료되게 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kill-명령-이용해-프로세스-종료&quot;&gt;kill 명령 이용해 프로세스 종료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;kill 명령
    &lt;ul&gt;
      &lt;li&gt;지정한 시그널을 프로세스에 보냄&lt;/li&gt;
      &lt;li&gt;9번(SIGKILL)은 강제 종료, 15번(SIGTERM)은 프로세스 종료, 2번(SIGINT)은 인터럽트&lt;/li&gt;
      &lt;li&gt;시그널을 지정하지 않으면 15번(SIGTERM) 시그널을 보냄&lt;/li&gt;
      &lt;li&gt;형식 : kill [시그널] PID …&lt;/li&gt;
      &lt;li&gt;시그널
        &lt;ul&gt;
          &lt;li&gt;-9 : 프로세스 강제 종료&lt;/li&gt;
          &lt;li&gt;-15 : 프로세스 종료. 프로세스가 관련 파일을 정리 후 종료. 종료되지 않는 프로세스가 있을 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pkill-명령-이용해-프로세스-종료&quot;&gt;pkill 명령 이용해 프로세스 종료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;프로세스 번호 대신 프로세스의 명령 이름(CMD)으로 프로세스를 찾아 종료시킴&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ sleep 100&amp;amp;
  [1] 7386
  $ sleep 200&amp;amp;
  [2] 7387
  $ ps –f
  UID PID PPID C STIME TTY TIME CMD
  ksshin 2570 1189 0 6월 16 tty1 00:00:12 -bash
  ksshin 7386 2570 0 17:42 tty1 00:00:00 sleep 100
  ksshin 7387 2570 0 17:42 tty1 00:00:00 sleep 200
  ksshin 7174 2570 0 17:42 tty1 00:00:00 ps -f
  $
    
    
    
  $ pkill sleep
  [1]- Terminated sleep 100
  [2]+ Terminated sleep 200
  $ ps –f
  UID PID PPID C STIME TTY TIME CMD
  ksshin 2570 1189 0 6월 16 tty1 00:00:12 -bash
  ksshin 7393 2570 0 17:42 tty1 00:00:00 ps -f
  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로세스-관리-도구&quot;&gt;프로세스 관리 도구&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ps 명령으로는 현재 프로세스 목록을 확인만 할 수 있음&lt;/li&gt;
  &lt;li&gt;이 정보를 가공하여 사용자가 보기 편하게 다양한 기능을 제공하는 도구&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pstree-명령&quot;&gt;pstree 명령&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스의 상태를 트리(Tree) 구조로 출력해 주는 명령&lt;/li&gt;
  &lt;li&gt;왼쪽이 부모 프로세스, 오른쪽이 자식 프로세스&lt;/li&gt;
  &lt;li&gt;형식 : pstree [옵션]&lt;/li&gt;
  &lt;li&gt;사용 예 : pstree -h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-명령&quot;&gt;top 명령&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;주기적으로 현재 실행 중인 프로세스에 대한 정보 출력&lt;/li&gt;
  &lt;li&gt;자세한 요약 정보를 상단에 출력, 각 프로세스 정보를 하단에 출력&lt;/li&gt;
  &lt;li&gt;형식 : top [옵션]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-20-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/03/20/unix-20/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/03/20/unix-20/</guid>
        
        <category>unix</category>
        
        
        <category>devlog</category>
        
      </item>
    
      <item>
        <title>[유닉스] 프로세스의 개념과 종류</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데몬-프로세스&quot;&gt;데몬 프로세스&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;프로세스process란&quot;&gt;프로세스(process)란&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;현재 실행 중인 프로그램&lt;/li&gt;
  &lt;li&gt;프로그램 : 어떤 문제를 해결하기 위해 사용되는 명령어나 유틸리티의 집합&lt;/li&gt;
  &lt;li&gt;프로그램을 실행하면 메모리(RAM, 주기억장치)에 상주. 이 때의 프로그램을 프로세스라고 함&lt;/li&gt;
  &lt;li&gt;시스템 운영에 필요한 기능을 수행하는 시스템 프로세스, 사용자들이 실행시킨 사용자 프로세스&lt;/li&gt;
  &lt;li&gt;사용자의 입력에 관계없이 실행되는 백그라운드(Background) 프로세스, 명령 입력 후 수행종료까지 기다려야 하는
포그라운드(Foreground) 프로세스&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;멀티태스킹multitasking과-작업-전환&quot;&gt;멀티태스킹(Multitasking)과 작업 전환&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;멀티태스킹이란 동시에 하나 이상의 프로그램을 실행하는 것&lt;/li&gt;
  &lt;li&gt;사용자 기준에서는, 다수의 프로그램들을 백그라운드 프로세스로 실행시킨 상태에서 추가로 포그라운드 프로세스로 다른 작업 수행 가능&lt;/li&gt;
  &lt;li&gt;사용자가 실행한 프로세스는 중간에 중지시킬 수 있음&lt;/li&gt;
  &lt;li&gt;백그라운드 프로세스를 포그라운드 프로세스로 전환하거나, 포그라운드 프로세스를 백그라운드 프로세스로 전환 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;부모-프로세스와-자식-프로세스&quot;&gt;부모 프로세스와 자식 프로세스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스는 부모-자식 관계가 있음&lt;/li&gt;
  &lt;li&gt;부모 프로세스가 자식 프로세스를 생성, 자식 프로세스는 다른 자식 프로세스를 생성&lt;/li&gt;
  &lt;li&gt;사용자가 실행시키는 명령도 프로세스로 실행됨.&lt;/li&gt;
  &lt;li&gt;사용자 명령은 쉘의 자식 프로세스가 됨&lt;/li&gt;
  &lt;li&gt;프로세스들은 각기 고유한 번호 PID(Process Identification Number)를 가짐&lt;/li&gt;
  &lt;li&gt;부모 프로세스는 고유 번호 PPID (Parent Process Identification Number)를 가짐&lt;/li&gt;
  &lt;li&gt;유닉스 부팅할 때 모든 프로세스의 조상인, PID가 1번인 init 프로세스 실행&lt;/li&gt;
  &lt;li&gt;1번 프로세스가 fork 방식으로 다른 프로세스들 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로세스의-생성&quot;&gt;프로세스의 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 프로세스가 다른 프로세스를 실행하기 위한 시스템 호출 방법 : fork, exec&lt;/li&gt;
  &lt;li&gt;fork
    &lt;ul&gt;
      &lt;li&gt;새로운 프로세스를 위해 메모리를 할당받아 복사본 형태의 프로세스를 실행하는 형태&lt;/li&gt;
      &lt;li&gt;기존의 프로세스는 그대로 실행&lt;/li&gt;
      &lt;li&gt;새롭게 생성된 프로세스는 원래의 프로세스와 똑같은 코드를 기반으로 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exec
    &lt;ul&gt;
      &lt;li&gt;원래의 프로세스를 새로운 프로세스로 대체하는 형태&lt;/li&gt;
      &lt;li&gt;호출한 프로세스의 메모리에 새로운 프로세스의 코드를 덮어씌워 버림&lt;/li&gt;
      &lt;li&gt;호출된 프로세스만 메모리에 남김&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로세스-초기화&quot;&gt;프로세스 초기화&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램을 사용하여 어떤 작업을 하기 위해서는 프로그램과 데이터가 메모리에 적재되어 있어야 함&lt;/li&gt;
  &lt;li&gt;프로그램과 데이터가 메모리에 적재되어 CPU의 연산 과정을 통해 실행될 수 있는 것을 프로세스라 함&lt;/li&gt;
  &lt;li&gt;메모리의 각 프로세스들은 모두 init 프로세스로부터 상속을 받아 생성됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;init-프로세스&quot;&gt;init 프로세스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;init 프로세스는 PID가 1번인 프로세스임&lt;/li&gt;
  &lt;li&gt;부팅 과정에서 커널이 PID 0번인 swapper 프로세스를 생성하고, swapper 프로세스가 init 프로세스를 생성&lt;/li&gt;
  &lt;li&gt;init 프로세스는 /etc/inittab 파일을 읽어들여 실행됨&lt;/li&gt;
  &lt;li&gt;init 프로세스가 사용자 환경에 필요한 스크립트를 실행시켜 사용자 환경이 구축되고 나면, 로그인 화면이 사용자에게나타남&lt;/li&gt;
  &lt;li&gt;init 프로세스가 하는 일
    &lt;ul&gt;
      &lt;li&gt;파일 시스템의 구조 검사&lt;/li&gt;
      &lt;li&gt;파일 시스템 마운트&lt;/li&gt;
      &lt;li&gt;서버 데몬을 띄움&lt;/li&gt;
      &lt;li&gt;사용자 로그인을 기다림&lt;/li&gt;
      &lt;li&gt;사용자가 로그인하면 사용자를 위한 쉘을 띄움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시그널signal&quot;&gt;시그널(Signal)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;‘신호’라는 의미, 프로세스끼리 서로 통신할 때 사용&lt;/li&gt;
  &lt;li&gt;특정 프로세스가 다른 프로세스에게 메시지 보낼 때 시그널 이용&lt;/li&gt;
  &lt;li&gt;사용자가 인터럽트 키를 통해 발생하는 시그널, 프로세스가 발생하는 시그널, 하드웨어가 발생하는 시그널&lt;/li&gt;
  &lt;li&gt;시그널 목록은 ‘kill –l’ 명령으로 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unix/2020-03-20-unix-19-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데몬daemon&quot;&gt;데몬(daemon)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;주기적이고 지속적으로 서비스 요청을 처리하기 위해 계속 실행되는 프로세스&lt;/li&gt;
  &lt;li&gt;백그라운드로 실행&lt;/li&gt;
  &lt;li&gt;서버 역할을 하는 프로그램들이 해당되고 보통 이름 뒤에 데몬을 뜻하는 d를 붙임&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데몬-프로세스-실행-방식&quot;&gt;데몬 프로세스 실행 방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;standalone 방식
    &lt;ul&gt;
      &lt;li&gt;부팅 시 실행되어 메모리에 계속 상주하면서 클라이언트의 서비스 요청을 처리하는 방식&lt;/li&gt;
      &lt;li&gt;웹, 메일 등 빈번한 요청이 들어오는 서비스&lt;/li&gt;
      &lt;li&gt;프로세스의 상태를 확인하는 ps 명령으로 확인해보면 항상 동작 중임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;inet 방식
    &lt;ul&gt;
      &lt;li&gt;클라이언트의 서비스 요청이 들어왔을 때 관련 프로세스를 실행시키고 접속 종료 후 자동으로 프로세스 종료시키는 방식&lt;/li&gt;
      &lt;li&gt;자주 사용하지 않는 서비스들에 대한 효율적인 메모리 관리에 유용함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로세스의-종류&quot;&gt;프로세스의 종류&lt;/h1&gt;

&lt;h3 id=&quot;데몬-프로세스-daemon-process&quot;&gt;데몬 프로세스 (daemon process)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;커널에 의해 실행되고 특정 서비스를 제공하기 위해 존재&lt;/li&gt;
  &lt;li&gt;웹 서비스를 제공하기 위해서는 httpd 프로세스가 동작하고 있어야 함&lt;/li&gt;
  &lt;li&gt;httpd를 웹 서버 데몬이라 함&lt;/li&gt;
  &lt;li&gt;평소 대기 상태로 서비스 요청을 기다리다가 서비스 요청이 들어오면 해당 서비스 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;부모-프로세스-parent-process&quot;&gt;부모 프로세스 (parent process)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다른 프로세스를 만드는 프로세스&lt;/li&gt;
  &lt;li&gt;부팅할 때 실행되는 1번 프로세스를 제외한 모든 프로세스는 부모 프로세스를 가지고 있음&lt;/li&gt;
  &lt;li&gt;PPID(Parent Process ID)를 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자식-프로세스-child-process&quot;&gt;자식 프로세스 (child process)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;부모 프로세스에 의해 만들어지는 프로세스&lt;/li&gt;
  &lt;li&gt;할 일이 끝나면 부모 프로세스에게 결과를 돌려주고 종료&lt;/li&gt;
  &lt;li&gt;vi를 실행시키면 쉘이 vi 프로세스 생성&lt;/li&gt;
  &lt;li&gt;쉘이 부모 프로세스, vi가 자식 프로세스&lt;/li&gt;
  &lt;li&gt;사용자가 vi 종료하면 다시 부모 프로세스인 쉘로 돌아감&lt;/li&gt;
  &lt;li&gt;PID(Process ID)를 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;고아-프로세스-orphan-process&quot;&gt;고아 프로세스 (orphan process)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;자식 프로세스가 아직 실행 중인데 부모 프로세스가 먼저 종료되면 자식 프로세스는 고아 프로세스가 됨&lt;/li&gt;
  &lt;li&gt;1번 프로세스가 새로운 부모 프로세스가 되어 고아 프로세스가 작업을 마치고 종료할 수 있도록 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;좀비-프로세스-zombie-process&quot;&gt;좀비 프로세스 (zombie process)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;자식 프로세스가 실행 종료 후에도 프로세스 테이블 목록에 남아있는 경우
    &lt;ul&gt;
      &lt;li&gt;일반적으로, 자식 프로세스가 종료할 때 부모 프로세스에게 종료 정보(exit status) 보내고, 부모 프로세스가 이 정보 받으면 프로세스 테이블 목록에서 자식 프로세스 삭제됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;부모 프로세스가 자식 프로세스의 종료 정보를 읽어가기를 기다림&lt;/li&gt;
  &lt;li&gt;프로세스 목록에 defunct 프로세스라고 나오기도 함&lt;/li&gt;
  &lt;li&gt;실제로 실행되고 있지 않지만 동작 중인 프로세스 테이블 목록을 차지&lt;/li&gt;
  &lt;li&gt;부모 프로세스에게 SIGCHILD 시그널을 보내서 부모 프로세스가 자식 프로세스를 정리하게 하거나, 부모 프로세스 자체를 종료시킴&lt;/li&gt;
  &lt;li&gt;부모 프로세스가 종료되면 좀비 프로세스는 고아 프로세스가 됨&lt;/li&gt;
  &lt;li&gt;새로운 부모인 init 프로세스가 자식 프로세스의 종료 정보를 주기적으로 확인, 정리&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://m-veloper.github.io/devlog/2020/03/20/unix-19/</link>
        <guid isPermaLink="true">https://m-veloper.github.io/devlog/2020/03/20/unix-19/</guid>
        
        <category>unix</category>
        
        
        <category>devlog</category>
        
      </item>
    
  </channel>
</rss>
